[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-07-22 20:18:55.139030",
  "module": "Hopital Custom App",
  "name": "Fetch Items On Invoice",
  "script": "\n\nfrappe.ui.form.on('Sales Invoice',{onload(frm){\n    frappe.form.link_formatters['Item'] =  function(value, doc) { \nreturn doc.item_name||value\n}\n},refresh:refresh,items:alert\n  //  items_add(frm){frm.refresh();}\n})\nfunction collapsedups(frm){\n     if(!frm.doc.items)frm.doc.items=[]\n     const unique=[],codes=[],sums=[],items=frm.doc.items\n for(const it of items)if(!codes.includes(it.item_code)){unique.push(it);if(it.item_code)codes.push(it.item_code);}\n for(const it of unique){\n   let   sum=items.filter(itm=>it.item_code==itm.item_code).map(i=>i.qty).reduce((a,b)=>{return a+b})\n   if(!it.item_code)sum=0\n  if(sum) it.qty=sum;sums.push(sum)\n }\n frm.doc.items=unique\n frm.refresh_field(\"items\");\n}\n\n\nfunction refresh(frm){\n    //document.querySelector(\"div[data-fieldname='items']\").onclick=()=>collapsedups(frm);\n /* frm.add_child=function(fieldname, values) {\n   \n\t\tvar doc = frappe.model.add_child(\n\t\t\tthis.doc,\n\t\t\tfrappe.meta.get_docfield(this.doctype, fieldname).options,\n\t\t\tfieldname\n\t\t);\n\t\tif (values) {\n\t\t\t// Values of unique keys should not be overridden\n\t\t\tvar d = {};\n\t\t\tvar unique_keys = [\"idx\", \"name\"];\n\n\t\t\tObject.keys(values).map((key) => {\n\t\t\t\tif (!unique_keys.includes(key)) {\n\t\t\t\t\td[key] = values[key];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$.extend(doc, d);\n\t\t\t\n\t\t}\n\t\treturn doc;\n\t}*/\n  \n    \n    /*\n    frm.set_query(\"batch_no\", function() {\n\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Batch\",\"qty\", \">\", 0]\n\t\t\t\t]\n\t\t\t\t,sortby:['creation','DESC']\n\t\t\t}\n\t\t\n\t\t});*/\n    \n  //checkDuplicates()\n    addCustomButton();\n    \n     \n        function addCustomButton(){\n             frm.add_custom_button('Get InPatient Medications Items',()=>getButtonMOClicked(),'Get Items From')\n                     frm.add_custom_button('Get Clincal Procedure Items',()=>getButtonCPClicked(),'Get Items From')\n//document.querySelectorAll('.btn-default').forEach(e=>{e.style.background='#2490ef',e.style.color='white'})\n        \n        }\n         function getButtonCPClicked(){\n             if(!frm.doc.patient){\n                 frappe.msgprint('Please Select A Patient','To get Clinical Procedures the Patient must be selected')\n                 return;\n             }\n             frappe.db.get_list('Clinical Procedure',{filters:{patient:frm.doc.patient},limit:5})\n             .then(function(list){\n                 if(list.length>0)showCPDocs();else frappe.msgprint('No records were found','Get Items >> Clinical Procedures')\n             })\n             function showCPDocs(){\n       new frappe.ui.form.MultiSelectDialog({\n    doctype: \"Clinical Procedure\",\n    target: frm,\n    title:'Select Clinical Procedure Record',\n    setters: {\n        \n    },\n    add_filters_group: 1,\n    date_field: \"start_date\",\n     get_query() {\n        return {\n            filters: { docstatus: ['=', 1],\n            patient:frm.doc.patient}\n        }\n    },\n    action(selections, args) {\n        this.dialog.hide()\n        if(selections.length>0) AllItemsMenu(selections,'Clinical Procedure','items');else frappe.msgprint(\n        'You may select items from Prescriptions,Healthcare Services,Medical Orders and more by selecting the GET ITEMS FROM button'\n        ,'No Medical Records were selected for '+frm.doc.patient.toUpperCase())\n    }})\n}\n\n}\n         function getButtonMOClicked(){\n             if(!frm.doc.patient){\n                 frappe.msgprint('Please Select A Patient','To get Medical Orders the Patient must be selected')\n                frm.fields_dict.patient.set_focus()\n                 return;\n             }\n             frappe.db.get_list('Inpatient Medication Entry',{filters:{patient:frm.doc.patient},limit:2,order_by:\"creation desc\"})\n             .then(function(list){\n                 if(list.length>0)showIMEDocs();else frappe.msgprint('No records were found','Get Items >> Inpatient Medication Entry')\n             })\n             function showIMEDocs(){\n       new frappe.ui.form.MultiSelectDialog({\n    doctype: \"Inpatient Medication Entry\",\n    target: frm,\n    title:'Select Medication Entries',\n    setters: {\n       posting_date:null,status:null\n    },columns: [ \"Date\", \"status\"],\n    add_filters_group: 1,\n    date_field: \"posting_date\",\n     get_query() {\n        return {\n            filters: { docstatus: ['!=', 2],\n            patient:frm.doc.patient},order_by:\"creation desc\"\n        }\n    },\n    action(selections, args) {\n        this.dialog.hide()\n        if(selections.length>0) AllItemsMenu(selections,'Inpatient Medication Entry','medication_orders');else frappe.msgprint(\n        'You may select items from Prescriptions,Healthcare Services,Clinical Procedures and more by selecting the GET ITEMS FROM button'\n        ,'No Medical Records were selected for '+frm.doc.patient.toUpperCase())\n    }})\n}\n\n}\n\n\n                function AllItemsMenu(docs,doctype,tablename,datefield,setters){\n                    if(docs.length<1)return\n     const items=[],codes=[];\n                  const promises=[]\n    docs.forEach(function(sl,i){const round=i;\n        let entry=frappe.db.get_doc(doctype,sl)\n        promises.push(entry)\n        entry.then((res)=>{\n      res[tablename]&& res[tablename].forEach((rd)=>{\n          const ord =rd\n         if(!ord)return\n          let code=ord.drug_code||ord.item_code\n          let iname=ord.drug_name||ord.item_name\n         if(code){ if(!codes.includes(code)){ \n              codes.push(code);\n              ord.item_code=code,ord.item_name=iname,ord.qty=ord.qty||1//,itm.rate=0,itm.amount=234 ) \n                 items.push({item_code :code,item_name:iname,qty:ord.qty})\n          }else{\n            let item=  items.filter((it)=>{return it.item_code==code})[0]\n            item&&item.qty&&item.qty++}\n         }}); \n      })\n    })\n            \n\n  Promise.allSettled(promises).then(()=>{\n      //alert(codes)\n   /*   new frappe.ui.form.MultiSelectDialog({\n    doctype: \"Item\",//fieldtype:'Link',\n    target: frm,\n    setters:{item_name:null },\n    add_filters_group: 1,\n    date_field:datefield,\n    get_query() {\n        return {\n            filters: {docstatus: ['!=', 2] ,\n            item_code:['in',codes]}\n        }\n    },columns:[\"Item Name\",\"Quantity\"],\n    action(selections) {\n        this.dialog.hide()\n\n\n        \n  \n    }\n});  */\n  let dialog = new frappe.ui.Dialog({primary_action_label:\"Get Items\",primary_action(){\n    let grid=this.get_field('table').grid;\n     let v=Array.from(grid.get_selected().values());\n      let docs=v.map(vl=>{return grid.get_row(vl).doc.item_code})\n    let selected=items.filter(it=>{return docs.includes(it.item_code)}) \n    selected .forEach(it=>it.__checked=0)\n    dialog.hide();cur_dialog=null;\n    new Promise((resolve ,reject)=>{\n        resolve( filterSelections(selected,items));}).then(\n     (r)=>{\n       r.add.length>0&&  addSelectedItems(r.add)\n       r.update.length>0&&updateSelectedItems(r.update)\n            \n     })//.finally(()=>dialog.hide( ))\n  },\n\t\t\t\ttitle: `Select Items to Invoice`,\n\t\t\t\tsize: \"extra-large\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Items',\n\t\t\t\t\t\tfieldname: 'table',\n\t\t\t\t\t\tfieldtype: 'Table',\n\t\t\t\t\t\tcannot_add_rows: true,\n\t\t\t\t\t\tin_place_edit: false,\n\t\t\t\t\t\tdata:items,\tfields: [\n\t\t\t\t\t\t\t{ fieldname: 'item_name', fieldtype: 'Data', in_list_view: 1, label: 'Name' },\n\t\t\t\t\t\t\t{ fieldname: 'qty', fieldtype: 'Data', in_list_view: 1, label: 'Quantity' },\n\t\t\t\t\t\t\t{ fieldname: 'item_code', fieldtype: 'Data', in_list_view: 1, label: 'Code' }\n\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n  }\n\t\t\t);\n\t\t\tdialog.show();\n\n      })\n\n                }\n        function filterSelections(selections,itemscollection){\n            console.log(itemscollection)\n        const items=selections//itemscollection.filter((t)=>t&&selections.includes(t.item_code))\n     const existing=Array.from(frm.doc.items).map((xt)=>{return xt.item_code})\n     console.log(existing)\n     console.log(items)\n          const   toUpdate=items.filter((itm)=>existing.includes(itm.item_code))\n      const toAdd=items.filter((itm)=>!existing.includes(itm.item_code))\n          return {add:toAdd,update:toUpdate}\n        }\n            \n             \n    \n\n        function addSelectedItems(selections){\n               const promises=[];\n      selections.forEach((sl,i)=>{const id=i,sel=sl\n      let row=null\n          promises.push(new Promise((r,rj)=>{\n     setTimeout(()=>  {\n         if(frm.doc.items\n         ){ row=frm.add_child('items',sl);\n        // frm?.doc?.items&&frm.refresh_field('items')\n          r(row);\n         }\n        \n         \n     },10*id)\n       \n      }).then((result)=>{\n          \n       Promise.allSettled([  frm.trigger('item_code','Sales Invoice Item',row.name)\n              ,frm.trigger('qty','Sales Invoice Item',row.name)\n              \n           ]) //.then( ()=> frm?.doc?.items&&frm.refresh_field('items'))\n             \n               \n         }))\n\n      });\n    return Promise.allSettled(promises).then(()=>{\n        \n        frm?.doc?.items&&frm.refresh_field('items')})\n   \n            \n        }\n\n             function updateSelectedItems(selections){\n                 let cancel=false\n              frappe.warn('Are you sure you want to proceed?',\n    'The following items already Exist. Pressing continue will only update their quantities:'+selections.map(g=>{return g.item_name}).join(','),\n    () => {\n        // action to perform if Continue is selected\n        update()\n    },\n    'Continue',\n    true // Sets dialog as minimizable\n)\nfunction update(){\n               const promises=[];\n      selections.forEach((sl,i)=>{const id=i\n          promises.push(new Promise((resolve,reject)=>{\n     setTimeout(()=>  {if(frm?.doc?.items){\n         let row=null\n         for(const rw of frm.doc.items){\n             if(rw.item_code===sl.item_code){row=rw;break;}\n         }\n        if(row)frappe.model.set_value(row.doctype,row.name,'qty',row.qty+sl.qty) ;\n        resolve('item '+row.item_code+' qty updated:'+row.qty+sl.qty);}\n         \n     },10*id)\n       \n      }).then((df)=>{\n        //  alert(JSON.stringify(df));\n          return df.toString();\n          \n      }))\n\n      });\n    return Promise.allSettled(promises)\n            .then(()=>{\n                console.log(promises);\n            if(frm?.doc?.items)frm.refresh_field('items')\n                \n            })\n   \n}\n        }\n cur_frm.grids[0].grid.add_custom_button('Remove Duplicates',()=>{ if(checkd().length){\n        frappe.show_alert({\n    message:__('duplicates removed'),\n    indicator:'green'\n}, 5);\n    }\n    else{\n        frappe.show_alert({\n    message:__('no duplicates'),\n    indicator:'blue'\n}, 5);\n    }},3)\ncur_frm.grids[0].grid.add_custom_button('Merge Duplicates',function(){\n    if(checkd(true).length){\n        frappe.show_alert({\n    message:__('duplicates merged'),\n    indicator:'green'\n}, 5);\n    }\n    else{\n        frappe.show_alert({\n    message:__('no duplicates'),\n    indicator:'blue'\n}, 5);\n    }\n    \n},4)\n\n        \n}\nfunction filterAdded(frm,cdt,cdn){\n   \n    let row=locals[cdt][cdn]\n    \n    if(!row.item_code||row.dupPass){//checkDuplicates();\n    return;}\n    let items=cur_frm.doc.items\n    let rowcount=items.reduce((a,v)=>a+(+(v.item_code&&(v.item_code==row.item_code))),0)\n    if(rowcount>1){\n        frappe.confirm('This item already exists,do you want to add a duplicate?',\n    () => {\n        // action to perform if Yes is selected\n        row.dupPass=1\n        \n    }, () => {\n        // action to perform if No is selected\n        cur_frm.get_field('items').grid.grid_rows[row.idx-1].remove()\n        items.splice(items.indexOf(row),1);\n    })\n        \n    }\n   //checkDuplicates() \n}\nwindow.checkd=checkDuplicates\nfunction checkDuplicates(merge){\n    \n//console.log('refreshed items')\n  let dups=[]\n    if(cur_frm.doc.items.length){\n        let len=cur_frm.doc.items.length\n//cur_frm.doc.items[len].dupPass=true\n \n        while(--len){\n            \n            const row=cur_frm.doc.items[len]\n           \n            \n            let rowcount=cur_frm.doc.items.slice(0,len==0?0:len-1).reduce((a,v)=>a+(+((v.item_code==row.item_code&&v.rate==row.rate&&v.qty==row.qty))),0)\n           \n          // console.log([rowcount,len])\n            if(rowcount+1>1){\n                if(row.dupPass)continue\n              dups.push([len,row])\n            }\n        }\n        if(dups.length){\n            let xmerge='merge',xremove='remove'\n                    frappe.confirm(`These items already exist,do you want to ${merge?xmerge:xremove} duplicates?\\n`+dups.map(d=>d[1].item_code).join(' '),\n    () => {\n        // action to perform if Yes is selected\n        for(const arr of dups.reverse()){\n            if(merge){//\n            let fst=cur_frm.doc.items.filter((itm)=>itm.item_code==arr[1].item_code)[0]\n           fst&& (fst.qty+=arr[1].qty);\n       arr[1].item_code&&cur_frm.trigger('qty','Sales Invoice Item',arr[1].name)\n                \n            }\n              cur_frm.get_field('items').grid.grid_rows[arr[0]].remove();\n                cur_frm.doc.items.splice(\n                    cur_frm.doc.items.indexOf(arr[1]),1);\n                \n        }\n        \n        \n        cur_frm.refresh_field('items')\n    }, () => {\n        // action to perform if No is selected\n         for(const arr of dups)arr[1].dupPass=1\n        })\n\n          \n        } \n    }\nreturn dups}\nfunction checkDuplicate(frm,cdt,cdn){\n    let row=locals[cdt][cdn]\n    \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-09-19 13:16:44.529597",
  "module": "Hopital Custom App",
  "name": "Remove  STO-ITEM",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    onload: function(frm) {\r\n        if (frm.doc.patient && !frm.doc.consultation_charge) {\r\n            // Fetch the most recent Sales Invoice for the patient with Consultation item group\r\n            frappe.call({\r\n                method: \"frappe.client.get_list\",\r\n                args: {\r\n                    doctype: \"Sales Invoice\",\r\n                    filters: {\r\n                        patient: frm.doc.patient,\r\n                        expired_erpnext: 0,\r\n                        creation: [\">\", '2024-01-29'],\r\n                    },\r\n                    order_by: \"creation desc\",\r\n                    limit: 1,\r\n                    fields: [\"name\"],\r\n                    child_filters: {\r\n                        \"Sales Invoice Item\": {\r\n                            item_group: \"Consultation\"\r\n                        }\r\n                    }\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message.length > 0) {\r\n                        // Set the most recent Sales Invoice as the consultation charge if it's not already set\r\n                        frm.set_value('consultation_charge', response.message[0].name);\r\n                        // Show all child tables\r\n                        frm.toggle_display(['procedure_prescription', 'therapies', 'lab_test_prescription', 'drug_prescription'], true);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    validate: function(frm) {\r\n        // Ensure that a valid consultation charge is selected\r\n        if (!frm.doc.consultation_charge) {\r\n            frappe.msgprint(__('You must select a valid consultation charge.'));\r\n            frappe.validated = false;\r\n        }\r\n    },\r\n    refresh: function(frm) {\r\n        // Triggered when the form is refreshed\r\n        // Always show child tables if consultation_charge is set, regardless of docstatus\r\n        if (frm.doc.consultation_charge) {\r\n            frm.toggle_display(['procedure_prescription', 'therapies', 'lab_test_prescription', 'drug_prescription'], true);\r\n        } else {\r\n            frm.toggle_display(['procedure_prescription', 'therapies', 'lab_test_prescription', 'drug_prescription'], false);\r\n        }\r\n    },\r\n    consultation_charge: function(frm) {\r\n        // Show child tables when consultation charge is set\r\n        if (frm.doc.consultation_charge) {\r\n            frm.toggle_display(['procedure_prescription', 'therapies', 'lab_test_prescription', 'drug_prescription'], true);\r\n        } else {\r\n            frm.toggle_display(['procedure_prescription', 'therapies', 'lab_test_prescription', 'drug_prescription'], false);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-07-22 20:18:55.257026",
  "module": "Hopital Custom App",
  "name": "Showpaymententrycounts",
  "script": "frappe.ui.form.on('Patient', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tlet badge=document.querySelector(\"div.document-link-badge[data-doctype='Payment Entry'] span\")\n\t\t\t\tlet link=document.querySelector(\"div.document-link-badge[data-doctype='Payment Entry'] a\")\nlet count=0;let doc=frm.doc;\n\tif(badge && link &&doc.customer){\n\t   frappe.db.get_list('Payment Entry',{filters:[['party','=',frm.doc.customer]]})\n\t   .then((r)=>{if(r.length){badge.innerText=r.length;badge.classList.remove('hidden')}})\n\t    if(doc.customer){\n\t       link.onclick=()=> frappe.set_route('payment-entry',{party:doc.customer})\n\t    }\n\t}\n\t    \n\t\n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-07-22 22:10:33.898182",
  "module": "Hopital Custom App",
  "name": "show custom patient",
  "script": "frappe.ui.form.on('Patient', {\r\n    onload: function(frm) {\r\n        // Initially hide the 'customer' field\r\n        frm.toggle_display('customer', false);\r\n        frm.toggle_display('custom_details', false);\r\n    },\r\n    re_attendance: function(frm) {\r\n        // Get the value of re_attendance field\r\n        var reAttendanceValue = frm.doc.re_attendance;\r\n        \r\n        // Set the 'hidden' property of 'customer' based on the value of 're_attendance'\r\n        frm.toggle_display('customer', reAttendanceValue === 'Care off' || reAttendanceValue === 'Existing Customer');\r\n    },\r\n    \r\n    custom_re_attendence: function(frm) {\r\n        // Get the value of re_attendance field\r\n        var reAttendanceValue = frm.doc.custom_re_attendence;\r\n        \r\n        // Set the 'hidden' property of 'customer' based on the value of 're_attendance'\r\n        frm.toggle_display('custom_details', reAttendanceValue === 'Yes');\r\n    },\r\n\r\n    validate: function(frm) {\r\n        var reAttendanceValue = frm.doc.custom_re_attendence;\r\n        var customDetailsTable = frm.doc.custom_details || [];\r\n        \r\n        if (reAttendanceValue === 'Yes' && customDetailsTable.length === 0) {\r\n            frappe.msgprint('Please add at least one entry in the My past Info table for this Patient.');\r\n            frappe.validated = false;\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-20 15:29:19.032397",
  "module": "Hopital Custom App",
  "name": "Sales Inv",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm) {\r\n        // Update the Cost Center in the items table when the Sales Invoice is refreshed\r\n        updateCostCenter(frm);\r\n    },\r\n    before_submit: function(frm) {\r\n        // Update the Cost Center in the items table before the Sales Invoice is submitted\r\n        updateCostCenter(frm);\r\n    }\r\n});\r\n\r\nfunction updateCostCenter(frm) {\r\n    // Get the Cost Center from the Sales Invoice\r\n    var cost_center = frm.doc.cost_center;\r\n\r\n    // Update the Cost Center in each item row\r\n    frm.doc.items.forEach(function(item) {\r\n        frappe.model.set_value(item.doctype, item.name, 'cost_center', cost_center);\r\n    });\r\n\r\n    // Refresh the items table to reflect the changes\r\n    frm.refresh_field('items');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2024-03-05 21:08:05.578926",
  "module": "Hopital Custom App",
  "name": "stock ENT",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n    refresh: function(frm) {\r\n        // Update the Cost Center in the items table when the Sales Invoice is refreshed\r\n        updateCostCenter(frm);\r\n    },\r\n    before_submit: function(frm) {\r\n        // Update the Cost Center in the items table before the Sales Invoice is submitted\r\n        updatedifferenceaccount(frm);\r\n    }\r\n});\r\n\r\nfunction updatedifferenceaccount(frm) {\r\n    // Get the Cost Center from the Sales Invoice\r\n    var difference_account = frm.doc.difference_account;\r\n\r\n    // Update the Cost Center in each item row\r\n    frm.doc.items.forEach(function(item) {\r\n        frappe.model.set_value(item.doctype, item.name, 'expense_account', difference_account);\r\n    });\r\n\r\n    // Refresh the items table to reflect the changes\r\n    frm.refresh_field('items');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-10-03 13:53:09.429889",
  "module": "Hopital Custom App",
  "name": "Sales INV2",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm) {\r\n        // Add a custom button to fetch clinical procedures\r\n        frm.add_custom_button(__('Fetch Procedures'), function() {\r\n            frappe.call({\r\n                method: 'hopital_custom_app.api.fetch_clinical_procedure_details',\r\n                args: { patient_name: frm.doc.patient },\r\n                callback: function(response) {\r\n                    console.log(response);\r\n                    if (response.message && response.message.length > 0) {\r\n                        response.message.forEach(function(item) {\r\n                            var child = frm.add_child('items');\r\n                            frappe.model.set_value(child.doctype, child.name, 'item_code', item.item_code);\r\n                            frappe.model.set_value(child.doctype, child.name, 'qty', item.qty);\r\n                            frappe.model.set_value(child.doctype, child.name, 'rate', item.rate);\r\n                            // Add other relevant fields\r\n                        });\r\n                        frm.refresh_field('items');\r\n                    } else {\r\n                        frappe.msgprint(__('No clinical procedures found for this patient.'));\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-10-03 13:54:13.411306",
  "module": "Hopital Custom App",
  "name": "SINV3",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Pharmacy'), function() {\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Stock Entry',\r\n                    filters: {\r\n                        'difference_account': frm.doc.name\r\n                    },\r\n                    fields: ['name']\r\n                },\r\n                callback: function(response) {\r\n                    var docid_exist = response.message;\r\n                    if (docid_exist && docid_exist.length > 0) {\r\n                        // Stock consumed logic here\r\n                        frappe.msgprint('Stock consumed already.');\r\n                        console.log('Stock consumed');\r\n                    } else {\r\n                        frappe.model.with_doctype('Stock Entry', function() {\r\n                            var se = frappe.model.get_new_doc('Stock Entry');\r\n                            \r\n                            se.stock_entry_type = 'Material Issue';\r\n                            se.from_warehouse = 'Pharmacy - KH';\r\n                            se.remarks = frm.doc.patient + ' - ' + frm.doc.customer_name + ' - ' + frm.doc.name;\r\n                            se.posting_date = frm.doc.posting_date;\r\n                            se.posting_time = frm.doc.posting_time;\r\n                            se.difference_account = frm.doc.name;\r\n                            se.patient_id = frm.doc.patient;\r\n                            \r\n                            // Add Stock Entry details based on Sales Invoice items\r\n                            frm.doc.items.forEach(function(item) {\r\n                                var se_detail = frappe.model.add_child(se, 'Stock Entry Detail', 'items');\r\n                                se_detail.item_code = item.item_code; \r\n                                se_detail.qty = item.qty;\r\n                                se_detail.uom = item.uom;\r\n                                se_detail.cost_center = frm.doc.cost_center;\r\n                                se_detail.conversion_factor = 1; // Set Conversion Factor as 1\r\n                                se_detail.qty = item.qty * se_detail.conversion_factor; // Calculate qty based on Conversion Factor\r\n                                se_detail.cost_center = item.cost_center;\r\n                                se_detail.stock_uom = item.uom;\r\n                                se_detail.transfer_qty = item.qty;\r\n                            });\r\n                        \r\n                            frappe.set_route('Form', 'Stock Entry', se.name); \r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 0,
  "modified": "2024-08-07 00:26:15.064851",
  "module": "Hopital Custom App",
  "name": "Pat Enc",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    onload(frm) {\r\n        var updateVisibility = function() {\r\n            var current_time = moment(frappe.datetime.now_time(), \"HH:mm:ss\");\r\n            var start_time = moment(\"17:30:00\", \"HH:mm:ss\"); // 5:30 PM\r\n            var end_time = moment(\"08:00:00\", \"HH:mm:ss\"); // 8:00 AM\r\n\r\n            if (current_time.isSameOrAfter(start_time) || current_time.isBefore(end_time)) {\r\n                frm.toggle_display('custom_fee', true);\r\n                frm.toggle_display('custom_consultation', true);\r\n\r\n                frm.add_custom_button(__('Create Sales Invoice'), function() {\r\n                    frappe.call({\r\n                        method: \"hopital_custom_app.custom_api.create_sales_invoice\",\r\n                        args: {\r\n                            patient_encounter: frm.doc.name\r\n                        },\r\n                        callback: function(response) {\r\n                            console.log(response)\r\n                            if (response.message) {\r\n                                frappe.msgprint(response.message);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                frm.toggle_display('custom_fee', false);\r\n                frm.toggle_display('custom_consultation', false);\r\n            }\r\n        };\r\n\r\n        updateVisibility(); // Initial check\r\n\r\n        setInterval(updateVisibility, 60000); // Update every minute\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-07-22 20:18:55.218821",
  "module": "Hopital Custom App",
  "name": "PE Enc",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    refresh: function(frm) {\r\n        var consultation_item = \"Consultation\";\r\n\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Item',\r\n                filters: { item_group: consultation_item },\r\n                limit: 1\r\n            },\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    frm.set_query('custom_consultation', function() {\r\n                        return {\r\n                            filters: { item_group: consultation_item }\r\n                        };\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    custom_consultation: function(frm) {\r\n        if (frm.doc.custom_consultation) {\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Item Price',\r\n                    filters: {\r\n                        item_code: frm.doc.custom_consultation,\r\n                        price_list: 'Standard Selling',\r\n                        selling: 1\r\n                    },\r\n                    fieldname: 'price_list_rate'\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        frm.set_value('custom_fee', response.message.price_list_rate);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inpatient Medication Entry",
  "enabled": 1,
  "modified": "2024-07-22 20:18:55.159689",
  "module": "Hopital Custom App",
  "name": "IME-Pharm",
  "script": "frappe.ui.form.on('Inpatient Medication Entry', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Consume Stock'), function() {\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Stock Entry',\r\n                    filters: {\r\n                    'difference_account': frm.doc.name\r\n                      \r\n                    },\r\n                    fields: ['name']\r\n                },\r\n                callback: function(response) {\r\n                    var stock_entry_list = response.message;\r\n                    if (stock_entry_list && stock_entry_list.length > 0) {\r\n                        frappe.msgprint('Stock consumed already.');\r\n                        console.log('Stock Entry already exists');\r\n                    } else {\r\n                        frappe.model.with_doctype('Stock Entry', function() {\r\n                            var se = frappe.model.get_new_doc('Stock Entry');\r\n                            se.stock_entry_type = 'Material Issue'; \r\n                            se.from_warehouse = frm.doc.warehouse;\r\n                            se.remarks = frm.doc.patient + ' - ' + frm.doc.customer_name + ' - ' + frm.doc.name;\r\n                            se.posting_date = frm.doc.posting_date;\r\n                            se.posting_time = frm.doc.posting_time;\r\n                            se.patient_id = frm.doc.patient;\r\n                            se.difference_account = frm.doc.name;\r\n                            \r\n                            // Add Stock Entry details based on Medication Entry items\r\n                            frm.doc.medication_orders.forEach(function(item) {\r\n                                var se_detail = frappe.model.add_child(se, 'Stock Entry Detail', 'items');\r\n                                se_detail.item_code = item.drug_code;\r\n                                se_detail.qty = item.dosage;\r\n                                se_detail.uom = item.uom;\r\n                                se_detail.transfer_qty = item.dosage;\r\n                                // se_detail.cost_center = item.cost_center;\r\n                                se_detail.cost_center = frm.doc.cost_center;\r\n                            });\r\n                            \r\n                            frappe.set_route('Form', 'Stock Entry', se.name);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inpatient Medication Order",
  "enabled": 1,
  "modified": "2024-03-06 15:22:14.134699",
  "module": "Hopital Custom App",
  "name": "IMO-BTN",
  "script": "frappe.ui.form.on('Inpatient Medication Order', {\r\n    refresh(frm) {\r\n        // Add a custom button to create a new Inpatient Medication Entry\r\n        frm.add_custom_button(__('Create Medication Entry'), function() {\r\n            frappe.new_doc('Inpatient Medication Entry', {\r\n                'patient': frm.doc.patient // Add any specific field values if needed\r\n            \r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure",
  "enabled": 1,
  "modified": "2024-07-22 20:18:55.179863",
  "module": "Hopital Custom App",
  "name": "CLI PRO",
  "script": "frappe.ui.form.on('Clinical Procedure', {\r\n    refresh: function(frm) {\r\n        // Add a custom button to copy items from bundle\r\n        frm.add_custom_button(__('Fetch Product Bundle Items'), function() {\r\n            frappe.call({\r\n                method: 'hopital_custom_app.custom_api.copy_items_from_bundle',\r\n                args: {\r\n                    procedure_name: frm.doc.name\r\n                },\r\n                callback: function(response) {\r\n                    console.log(response)\r\n                    if (response.message) {\r\n                        // Refresh the form to reflect the changes\r\n                        frm.doc.items = []; // Clear existing items\r\n                        response.message.forEach(function(item) {\r\n                            var procedure_item = frappe.model.add_child(frm.doc, 'Clinical Procedure Item', 'items');\r\n                            procedure_item.item_code = item.item_code; \r\n                            procedure_item.qty = item.qty;\r\n                            procedure_item.uom = item.uom;\r\n                            procedure_item.item_name = item.item_code;\r\n                            procedure_item.stock_uom = item.uom;\r\n                        });\r\n                        frm.refresh_field('items'); // Refresh the items table\r\n                        frappe.msgprint('Items Inserted in the Clinical Procedure Table below');\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-03-13 17:48:37.668399",
  "module": "Hopital Custom App",
  "name": "Fullinvoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.customer) {\r\n            frm.add_custom_button(\r\n                __(\"Save and Print\"),\r\n                function () {\r\n                    frappe.call({\r\n                        method: \"hopital_custom_app.api.generate_customer_sales_summary\",\r\n                        args: {\r\n                           customer: frm.doc.customer\r\n                        },\r\n                        callback: function (response) {\r\n                            // console.log(response);\r\n                            if (response.message && Array.isArray(response.message)) {\r\n                                var salesData = response.message;\r\n                                var totalData = response.message[response.message.length - 1];\r\n                                frappe.model.with_doctype('Sales Invoice Report', function() {\r\n                                    var sir = frappe.model.get_new_doc('Sales Invoice Report');\r\n                                    sir.patient = frm.doc.patient; \r\n                                    sir.patient_name = frm.doc.patient_name; \r\n                                    sir.customer = frm.doc.customer;\r\n                                    sir.date = frm.doc.posting_date;\r\n                                    sir.outstanding_amount = totalData['Total Outstanding Amount'];\r\n                                    sir.grand_total = totalData['Total Amount'];\r\n                                    \r\n                                    // Add Sales Invoice details\r\n                                    salesData.forEach(function(sale) {\r\n                                        if (sale.Items && Array.isArray(sale.Items)) {\r\n                                            sale.Items.forEach(function(item) {\r\n                                                var sir_detail = frappe.model.add_child(sir, 'Sales Invoice Details', 'invoice_detais');\r\n                                                sir_detail.item_code = item['Item Code'];\r\n                                                sir_detail.qty = item.Qty;\r\n                                                sir_detail.rate = item.Rate;\r\n                                                sir_detail.amount = item.Amount;\r\n                                            });\r\n                                        }\r\n                                    });\r\n\r\n                                    // frm.refresh_field('invoice_details'); // Refresh the child table view\r\n                                    frappe.set_route('Form', 'Sales Invoice Report', sir.name);\r\n                                });\r\n                            } else {\r\n                                frappe.msgprint(\"No sales data found for this customer.\");\r\n                            }\r\n                        },\r\n                    });\r\n                },\r\n                __(\"Full Invoice\")\r\n            );\r\n            \r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice Report",
  "enabled": 1,
  "modified": "2024-03-13 08:13:40.740476",
  "module": "Hopital Custom App",
  "name": "Invoice Report",
  "script": "frappe.ui.form.on('Sales Invoice Report', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-07-23 01:04:02.794779",
  "module": "Hopital Custom App",
  "name": "PE ACQTY",
  "script": "frappe.ui.form.on('Drug Prescription', {\r\n    medication: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        if (child.medication) {\r\n            frappe.call({\r\n                method: \"frappe.client.get_list\",\r\n                args: {\r\n                    doctype: \"Medication\",\r\n                    filters: {\r\n                        generic_name: child.medication\r\n                    },\r\n                    fields: [\"generic_name\"]\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message && response.message.length > 0) {\r\n                        var item_code = response.message[0].generic_name;\r\n                        if (item_code) {\r\n                            frappe.call({\r\n                                method: \"frappe.client.get_list\",\r\n                                args: {\r\n                                    doctype: \"Bin\",\r\n                                    filters: {\r\n                                        item_code: item_code,\r\n                                        warehouse:\"Stores - HMH\"\r\n                                    },\r\n                                    fields: [\"actual_qty\"]\r\n                                },\r\n                                callback: function(bin_response) {\r\n                                    if (bin_response.message && bin_response.message.length > 0) {\r\n                                        var stock = bin_response.message[0].actual_qty;\r\n                                        child.custom_actual_stock = stock;\r\n                                        frm.refresh_field('drug_prescription');\r\n                                        // frappe.msgprint(__('Stock available for {0}: {1}', [child.medication, stock]));\r\n                                    } else {\r\n                                        // frappe.msgprint(__('Medication with is [Generic Name] is not the same with Item Code: '));\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else {\r\n                            // frappe.msgprint(__('Linked item not found for ', [child.medication]));\r\n                        }\r\n                    } else {\r\n                        // frappe.msgprint(__('Medication not found: ', [child.medication]));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "General Consumption",
  "enabled": 1,
  "modified": "2024-03-27 17:03:47.461127",
  "module": "Hopital Custom App",
  "name": "General Consumption",
  "script": "frappe.ui.form.on('General Consumption', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n        frm.add_custom_button(__('Consume Stock'), function() {\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Stock Entry',\r\n                    filters: {\r\n                    'difference_account': frm.doc.name\r\n                      \r\n                    },\r\n                    fields: ['name']\r\n                },\r\n                callback: function(response) {\r\n                    var stock_entry_list = response.message;\r\n                    if (stock_entry_list && stock_entry_list.length > 0) {\r\n                        frappe.msgprint('Stock consumed already.');\r\n                        console.log('Stock Entry already exists');\r\n                    } else {\r\n                        frappe.model.with_doctype('Stock Entry', function() {\r\n                            var se = frappe.model.get_new_doc('Stock Entry');\r\n                            se.stock_entry_type = 'Material Issue'; \r\n                            se.from_warehouse = frm.doc.warehouse;\r\n                            se.remarks = frm.doc.patient + ' - ' + frm.doc.customer_name + ' - ' + frm.doc.name;\r\n                            se.posting_date = frm.doc.posting_date;\r\n                            se.posting_time = frm.doc.posting_time;\r\n                            se.patient_id = frm.doc.patient;\r\n                            se.difference_account = frm.doc.name;\r\n                            \r\n                            // Add Stock Entry details based on Medication Entry items\r\n                            frm.doc.consumption_details.forEach(function(item) {\r\n                                var procedure_item = frappe.model.add_child(se, 'Stock Entry Detail', 'items');\r\n                                  procedure_item.item_code = item.item_code; \r\n                                  procedure_item.qty = item.qty;\r\n                                  procedure_item.uom = item.uom;\r\n                                  procedure_item.item_name = item.item_code;\r\n                                  procedure_item.stock_uom = item.uom;\r\n                                  procedure_item.transfer_qty = item.qty;\r\n                                  procedure_item.cost_center = frm.doc.cost_center;\r\n                                  procedure_item.expense_account = \"8700-1 - Drugs and Medical Supplies Costs. - KH\";\r\n                            });\r\n                            \r\n                            frappe.set_route('Form', 'Stock Entry', se.name);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "General Consumption",
  "enabled": 1,
  "modified": "2024-07-22 20:18:55.085626",
  "module": "Hopital Custom App",
  "name": "Actall QTY GC",
  "script": "frappe.ui.form.on('General Consumption', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        var item_code = child.item_code;\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Bin\",\r\n                filters: {\r\n                    item_code: item_code,\r\n                    warehouse: \"Pharmacy - KH\"\r\n                },\r\n                fields: [\"actual_qty\"]\r\n            },\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    var stock = response.message[0].actual_qty;\r\n                    child.actual_stock = stock;\r\n                    frm.refresh_field('consumption_details');\r\n                } else {\r\n                    // frappe.msgprint(__('Medication with is [Generic Name] is not the same with Item Code: '));\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test",
  "enabled": 1,
  "modified": "2024-03-27 19:43:59.070439",
  "module": "Hopital Custom App",
  "name": "LAB BTN",
  "script": "frappe.ui.form.on('Lab Test', {\r\n    refresh(frm) {\r\n        // Add a custom button to create a new Inpatient Medication Entry\r\n        if (frm.doc.docstatus === 1) {\r\n        frm.add_custom_button(__('Create Consumption Entry'), function() {\r\n            frappe.new_doc('General Consumption', {\r\n                'patient': frm.doc.patient // Add any specific field values if needed\r\n            \r\n            });\r\n        });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Payment Management",
  "enabled": 1,
  "modified": "2024-08-21 12:56:46.462371",
  "module": "Hopital Custom App",
  "name": "Validate invoice details",
  "script": "frappe.ui.form.on('Patient Payment Management', {\r\n    before_submit: function(frm) {\r\n        // Check if the invoice_details child table is empty\r\n        if (!frm.doc.invoice_detailed_items || frm.doc.invoice_detailed_items.length === 0) {\r\n            // Show an error message\r\n            frappe.msgprint(__('Please Update Invoice Table fast, before submitting.'));\r\n            // Prevent the form from submitting\r\n            frappe.validated = false;\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]