[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-10-07 14:24:52.733668",
  "module": "HMH CUSTOM APP",
  "name": "Get the amount Prescribed",
  "script": "frappe.ui.form.on('Drug Prescription', {\r\n    period: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n\r\n        // Check if the period field has a value\r\n        if (item.period) {\r\n            if (frm.doc.custom_price_list) {\r\n                console.log(\"Price list found:\", frm.doc.custom_price_list);\r\n                frappe.model.set_value(cdt, cdn, 'price_list', frm.doc.custom_price_list);\r\n\r\n                // Call the function to update the amount based on the item selected\r\n                update_item_amount(frm, item, cdt, cdn);\r\n            } else {\r\n                console.log(\"No price list found.\");\r\n            }\r\n        } else {\r\n            console.log(\"Period is not selected.\");\r\n   \r\n        }\r\n    },\r\n    dosage: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n\r\n        // Check if the period field has a value\r\n        if (item.period) {\r\n            if (frm.doc.custom_price_list) {\r\n                console.log(\"Price list found:\", frm.doc.custom_price_list);\r\n                frappe.model.set_value(cdt, cdn, 'price_list', frm.doc.custom_price_list);\r\n\r\n                // Call the function to update the amount based on the item selected\r\n                update_item_amount(frm, item, cdt, cdn);\r\n            } else {\r\n                console.log(\"No price list found.\");\r\n            }\r\n        } else {\r\n            console.log(\"Period is not selected.\");\r\n   \r\n        }\r\n    }\r\n});\r\n\r\nfunction update_item_amount(frm, item, cdt, cdn) {\r\n    console.log(\"Calling server method to update amount...\");\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.drug_priscription.on_submit',\r\n        args: {\r\n            patient_encounter: frm.doc.name,\r\n            selected_drug_code: item.drug_code, // Make sure to pass the selected drug code\r\n            dosage: item.dosage,\r\n            period: item.period,\r\n        },\r\n        callback: function(r) {\r\n            console.log(\"Server response:\", r);\r\n            if (r.message) {\r\n                var selected_item_amount = r.message.selected_item_amount;\r\n                var qty = r.message.qty;\r\n                var rate = r.message.rate;\r\n\r\n                // Set the amount for the current drug_prescription item\r\n                frappe.model.set_value(cdt, cdn, 'custom_amount', selected_item_amount);\r\n                frappe.model.set_value(cdt, cdn, 'custom_qty', qty);\r\n                frappe.model.set_value(cdt, cdn, 'custom_rate', rate);\r\n\r\n        } else {\r\n                // frappe.msgprint(__('Error: ') + (r.message ? r.message.message : 'Unknown error'));\r\n            }\r\n        },\r\n        error: function(r) {\r\n            // frappe.msgprint(__('Server call failed.'));\r\n            console.error(\"Server call failed:\", r);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-10-02 15:43:24.899957",
  "module": "HMH CUSTOM APP",
  "name": "testing",
  "script": "frappe.ui.form.on('Patient', {\n    refresh: function (frm) {\n\n        var consultation_item = \"Consultation\";\n\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Item',\n                filters: { item_group: consultation_item },\n                limit: 1\n            },\n            callback: function (response) {\n                if (response.message && response.message.length > 0) {\n                    frm.set_query('custom_consultation', function () {\n                        return {\n                            filters: { item_group: consultation_item }\n                        };\n                    });\n                }\n            }\n        });\n\n\n        // Ensure this runs after the form is loaded or when appropriate\n        if (!frm.doc.__islocal) {  // Ensure the buttons are not shown on a new document\n            checkUserRoleAndAddButtons(frm);\n        }\n  \n    },\n    \n      custom_consultation: function (frm) {\n        if (frm.doc.custom_consultation) {\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Item Price',\n                    filters: {\n                        item_code: frm.doc.custom_consultation,\n                        price_list: frm.doc.default_price_list,\n                        selling: 1\n                    },\n                    fieldname: 'price_list_rate'\n                },\n                callback: function (response) {\n                    if (response.message) {\n                        frm.set_value('custom_fee', response.message.price_list_rate);\n                    }\n                }\n            });\n        }\n    },\n    custom_patient_mrno: function (frm) {\n        if (frm.doc.custom_patient_mrno) {\n            // Fetch the Patient Registration Identification linked by custom_patient_mrno\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Patient Registration Identification',\n                    filters: { 'name': frm.doc.custom_patient_mrno },\n                    fields: ['name', 'customer', 'visit']\n                },\n                callback: function (response) {\n                    let patient_reg_id = response.message;\n                    if (patient_reg_id && patient_reg_id.length > 0) {\n                        let patient_reg_doc_name = patient_reg_id[0].name;\n                        // Fetch the Patient Registration Identification document\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Patient Registration Identification',\n                                name: patient_reg_doc_name\n                            },\n                            callback: function (response) {\n                                let patient_reg_doc = response.message;\n                                if (patient_reg_doc) {\n                                    if (!patient_reg_doc.customer) {\n                                        // Update the customer field in Patient Registration Identification visit \n                                        patient_reg_doc.visit = \"First Time Visit\";\n                                        frappe.call({\n                                            method: 'frappe.client.save',\n                                            args: {\n                                                doc: patient_reg_doc\n                                            },\n                                            callback: function (response) {\n                                                console.log('Patient Registration Identification updated successfully');\n                                            }\n                                        });\n                                    }\n\n                                    if (patient_reg_doc.customer && patient_reg_doc.visit) {\n                                        // Set the custom patient field in the Patient doctype\n                                        frm.set_value('re_attendance', 'Existing Customer');\n                                        frm.set_value('custom_attendance_', 'Re-Attendance');\n                                        frm.set_value('customer', patient_reg_doc.customer);\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n})\n\n\nfunction handlePayment(frm, payment_type) {\n    let method = payment_type === 'pay_later'\n        ? 'hmh_custom_app.custom_api.sales_invoice.collect_invoices'\n        : 'hmh_custom_app.custom_api.sales_invoice.collect_invoices';\n\n    frappe.call({\n        method: method,\n        args: {\n            patient: frm.doc.name\n        },\n        callback: function (r) {\n            if (r.message) {\n                if (r.message.error) {\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: r.message.error\n                    });\n                } else {\n                    frappe.msgprint({\n                        title: __('Success'),\n                        indicator: 'green',\n                        message: r.message.message\n                    });\n                }\n            } else {\n                frappe.msgprint({\n                    title: __('Information'),\n                    indicator: 'orange',\n                    message: __('No response message received.')\n                });\n            }\n        },\n        error: function (err) {\n            frappe.msgprint({\n                title: __('Error'),\n                indicator: 'red',\n                message: __('An error occurred: ' + err.message)\n            });\n        }\n    });\n}\n\nfunction checkUserRoleAndAddButtons(frm) {\n    // Check if the customer group on the patient is \"Insurance\"\n    if (frm.doc.customer_group === \"Insurance\") {\n        // Hide \"Pay Now\" and \"Pay Later\" buttons\n        frm.remove_custom_button(__('Pay Now'));\n        frm.remove_custom_button(__('Pay Later'));\n\n        // Show \"Create Bill\" button\n        frm.add_custom_button(__('Create Bill'), function () {\n            createBill(frm);\n        });\n    } else {\n        // If the customer group is not \"Insurance\", proceed with existing role-based button logic\n        frappe.call({\n            method: 'hmh_custom_app.custom_api.get_role.get_user_roles',\n            args: {},\n            callback: function (r) {\n                if (r.message) {\n                    // Add \"Pay Now\" button for all users\n                    frm.add_custom_button(__('Pay Now'), function () {\n                        handlePayment(frm, 'pay_now');\n                    });\n\n                    if (r.message.roles.includes('Pay Later')) {\n                        // Add \"Pay Later\" button if the user has the role\n                        frm.add_custom_button(__('Pay Later'), function () {\n                            handlePayment(frm, 'pay_later');\n                            createVitalsForLater(frm);\n                        });\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Information'),\n                        indicator: 'orange',\n                        message: __('No user roles received.')\n                    });\n                }\n            },\n            error: function (err) {\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('An error occurred while fetching user roles: ' + err.message)\n                });\n            }\n        });\n    }\n}\n\nfunction createBill(frm) {\n    // Define the method to call\n    let method = 'hmh_custom_app.custom_api.sales_invoice.collect_invoices';\n\n    // Make the server call to collect invoices\n    frappe.call({\n        method: method,\n        args: {\n            patient: frm.doc.name\n        },\n        callback: function (r) {\n            if (r.message) {\n                if (r.message.error) {\n                    // Display an error message if there is an error\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: r.message.error\n                    });\n                } else {\n                    // Display a success message if the operation is successful\n                    frappe.msgprint({\n                        title: __('Success'),\n                        indicator: 'green',\n                        message: r.message.message\n                    });\n                }\n            } else {\n                // Handle case where there is no message in the response\n                frappe.msgprint({\n                    title: __('Information'),\n                    indicator: 'orange',\n                    message: __('No response message received.')\n                });\n            }\n        },\n        error: function (err) {\n            // Handle any errors that occur during the call\n            frappe.msgprint({\n                title: __('Error'),\n                indicator: 'red',\n                message: __('An error occurred: ' + err.message)\n            });\n        }\n    });\n}\n\nfunction update_patient_bill_status(frm) {\n    // Call the server-side method to update patient bill status\n    frappe.call({\n        method: 'hmh_custom_app.custom_api.patient.update_patient_bill_status',\n        args: {\n            'custom_payment_id': frm.doc.name\n        },\n        callback: function(response) {\n            if (response.message) {\n                frappe.msgprint(response.message);\n            }\n        }\n    });\n}\nfunction createVitalsForLater(frm) {\n    // Call the server-side method to create vital signs for the patient\n    frappe.call({\n        method: 'hmh_custom_app.custom_api.vitual_signs.create_vital_signs_for_patient',\n        args: {\n            'doc_name': frm.doc.name\n        },\n        callback: function(response) {\n            if (response.message) {\n                frappe.msgprint(response.message);\n            } else {\n                frappe.msgprint({\n                    title: __('Information'),\n                    indicator: 'orange',\n                    message: __('No action taken for vital signs creation.')\n                });\n            }\n        },\n        error: function(err) {\n            frappe.msgprint({\n                title: __('Error'),\n                indicator: 'red',\n                message: __('An error occurred while creating vital signs: ' + err.message)\n            });\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-20 18:12:21.986200",
  "module": "HMH CUSTOM APP",
  "name": "Patient Bills",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    custom_get_patients_bill: function(frm) {\r\n        update_custom_items_table(frm);\r\n    },\r\n    custom_get_bills: function(frm) {\r\n        update_items_table(frm);\r\n    },\r\n    custom_view_traige: function(frm) {\r\n        viewTriage(frm);\r\n    },\r\n\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Expense Claim Items', {\r\n    amount: function (frm, cdt, cdn) {\r\n        calculateTotalsTransfers(frm);\r\n    }\r\n});\r\n\r\nfunction update_custom_items_table(frm) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.patient_encounter.on_submit',\r\n        args: {\r\n            patient_encounter: frm.doc.name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message.status === 'success') {\r\n                frappe.msgprint(r.message.message);\r\n                // Refresh the custom_items table to reflect the changes\r\n                frm.refresh_field('custom_items');\r\n                // Reload the page\r\n                 location.reload();\r\n            } else {\r\n                frappe.msgprint(__('Error: ') + r.message.message);\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n        }\r\n    });\r\n}\r\n\r\nfunction update_items_table(frm) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.encounter.on_submit',\r\n        args: {\r\n            patient_encounter: frm.doc.name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message.status === 'success') {\r\n                frm.set_value('custom_total_amount', r.message.sums.drug_sum);\r\n                frm.set_value('custom_total_investigations', r.message.sums.lab_test_sum);\r\n                frm.set_value('custom_total_clinical_procedures', r.message.sums.procedure_sum);\r\n                frm.set_value('custom_total_therapies', r.message.sums.therapy_sum);\r\n                frm.set_value('custom_total_service_request', r.message.sums.service_sum);\r\n                 frm.save();\r\n                 \r\n            } else {\r\n                frappe.msgprint(__('Error: ') + r.message.message);\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n        }\r\n    });\r\n}\r\n\r\n\r\n// Function to navigate to the Vital Signs form\r\nfunction viewTriage(frm) {\r\n    // Check if the form object and doc are valid\r\n    console.log(\"Iseee youiyh\")\r\n    if (frm && frm.doc) {\r\n        // Check if custom_vitals_id exists in the doc\r\n        if (frm.doc.custom_vitals_id) {\r\n            // Navigate to the Vital Signs form with the given custom_vitals_id\r\n            frappe.set_route('Form', 'Vital Signs', frm.doc.custom_vitals_id);\r\n        } else {\r\n            // Display a message if custom_vitals_id is not found\r\n            frappe.msgprint(__('No Vitals ID found.'));\r\n        }\r\n    } else {\r\n        // Display an error message if frm or frm.doc is not valid\r\n        frappe.msgprint(__('Form object or document is invalid.'));\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Registration Identification",
  "enabled": 1,
  "modified": "2024-08-07 09:31:57.436721",
  "module": "HMH CUSTOM APP",
  "name": "Customer FIilters",
  "script": "frappe.ui.form.on('Patient Registration Identification', {\r\n    customer_group: function(frm) {\r\n        // Clear the customer field\r\n        frm.set_value('customer', '');\r\n        \r\n        // Set the filter for the customer field based on the selected customer group\r\n        if (frm.doc.customer_group) {\r\n            frm.set_query('customer', function() {\r\n                return {\r\n                    filters: {\r\n                        'customer_group': frm.doc.customer_group\r\n                    }\r\n                };\r\n            });\r\n        } else {\r\n            frm.set_query('customer', function() {\r\n                return {\r\n                    filters: {}\r\n                };\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-08 14:34:06.406004",
  "module": "HMH CUSTOM APP",
  "name": "Request for vitals",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    custom_request_for_another_vitals: function(frm) {\r\n        requestTriage(frm);\r\n    },\r\n});\r\n\r\nfunction requestTriage(frm) {\r\n    // Check if the form object and doc are valid\r\n    if (frm && frm.doc) {\r\n        // Create a new Vital Signs document\r\n        frappe.model.with_doctype('Vital Signs', function() {\r\n            let vital_sign_doc = frappe.model.get_new_doc('Vital Signs');\r\n\r\n            // Set the fields from the Patient Encounter to the new Vital Signs document\r\n            vital_sign_doc.patient = frm.doc.patient;\r\n            vital_sign_doc.patient_name = frm.doc.patient_name;\r\n            vital_sign_doc.custom_practionaer = frm.doc.practitioner;\r\n            vital_sign_doc.custom_encounter_id = frm.doc.name;\r\n            vital_sign_doc.custom_patient_status = 'Doctor\\'s Request';\r\n\r\n            // Insert the new document into the database without routing\r\n            frappe.db.insert(vital_sign_doc).then(function(doc) {\r\n                frappe.msgprint(__('Your Vital Signs Request Sent successfully.'));\r\n            }).catch(function(error) {\r\n                frappe.msgprint(__('Failed to create Vital Signs document.'));\r\n                console.error(error);\r\n            });\r\n        });\r\n    } else {\r\n        // Display an error message if frm or frm.doc is not valid\r\n        frappe.msgprint(__('Form object or document is invalid.'));\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-10 13:02:49.134629",
  "module": "HMH CUSTOM APP",
  "name": "Set Due Date",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    encounter_date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.encounter_date);\r\n        postingDate.setDate(postingDate.getDate() + 30);\r\n        \r\n        // Format the date to YYYY-MM-DD\r\n        var dueDate = postingDate.toISOString().split('T')[0];\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('custom_due_date', dueDate);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-13 14:50:34.902389",
  "module": "HMH CUSTOM APP",
  "name": "Wipe all",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    custom_remove_drug_status: function(frm) {\r\n     \r\n    wipe_custom_drug_status(frm);\r\n    \r\n    }\r\n});\r\n\r\nfunction wipe_custom_drug_status(frm) {\r\n    // Iterate through each item in the drug prescription\r\n    frm.doc.drug_prescription.forEach(function(item) {\r\n        // Set the `custom_drug_status` field to an empty value\r\n        item.custom_drug_status = '';\r\n    });\r\n    \r\n    // Refresh the field to reflect changes in the UI\r\n    frm.refresh_field('drug_prescription');\r\n    \r\n    // Optionally, save the document if you want to persist changes\r\n    frm.save();\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test",
  "enabled": 1,
  "modified": "2024-08-15 15:22:54.774107",
  "module": "HMH CUSTOM APP",
  "name": "Update status Lab",
  "script": "frappe.ui.form.on('Lab Test', {\n    on_submit: function(frm) {\n        update_lab_test_prescription(frm);\n       }\n    });\n\n\nfunction update_lab_test_prescription(frm) {\n    // Call the server-side method to update patient bill status\n    frappe.call({\n        method: 'hmh_custom_app.custom_api.labtest.lab_test.lab_status',\n        args: {\n            'docname': frm.doc.name\n        },\n        callback: function(response) {\n            console.log(response)\n            // if (response.message) {\n            //     frappe.msgprint(response.message); \n            // }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-15 17:27:30.430583",
  "module": "HMH CUSTOM APP",
  "name": "Href Results",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    refresh: function(frm) {\r\n        // Check if the form is loaded with lab_test_prescription table\r\n        if (frm.doc.lab_test_prescription && frm.fields_dict['lab_test_prescription']) {\r\n            frm.doc.lab_test_prescription.forEach(function(row) {\r\n                if (row.custom_results_status === \"Results Ready\") {\r\n                    // Get the row element in the grid\r\n                    let row_element = frm.fields_dict['lab_test_prescription'].grid.get_row(row.name).row;\r\n                    \r\n                    // Create a clickable span element\r\n                    let clickable_span = $(`<span style=\"color:blue;cursor:pointer;\">${row.custom_results_status}</span>`);\r\n\r\n                    // Attach the click event to navigate to the lab test document\r\n                    clickable_span.on('click', function() {\r\n                        frappe.set_route('Form', 'Lab Test', row.custom_labtest_id);\r\n                    });\r\n\r\n                    // Replace the text in the grid with the clickable span\r\n                    $(row_element).find(`[data-fieldname=\"custom_results_status\"]`).html(clickable_span);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check if the form is loaded with custom_radiology_items table\r\n        if (frm.doc.custom_radiology_items && frm.fields_dict['custom_radiology_items']) {\r\n            frm.doc.custom_radiology_items.forEach(function(row) {\r\n                if (row.results_status === \"Results Ready\") {\r\n                    // Get the row element in the grid\r\n                    let row_element = frm.fields_dict['custom_radiology_items'].grid.get_row(row.name).row;\r\n                    \r\n                    // Create a clickable span element\r\n                    let clickable_span = $(`<span style=\"color:blue;cursor:pointer;\">${row.results_status}</span>`);\r\n\r\n                    // Attach the click event to navigate to the observation test document\r\n                    clickable_span.on('click', function() {\r\n                        frappe.set_route('Form', 'Observation', row.observe_id);\r\n                    });\r\n\r\n                    // Replace the text in the grid with the clickable span\r\n                    $(row_element).find(`[data-fieldname=\"results_status\"]`).html(clickable_span);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check if the form is loaded with procedure_prescription table\r\n        if (frm.doc.procedure_prescription && frm.fields_dict['procedure_prescription']) {\r\n            frm.doc.procedure_prescription.forEach(function(row) {\r\n                if (row.custom_proceding_status === \"Results Ready\") {\r\n                    // Get the row element in the grid\r\n                    let row_element = frm.fields_dict['procedure_prescription'].grid.get_row(row.name).row;\r\n                    \r\n                    // Create a clickable span element\r\n                    let clickable_span = $(`<span style=\"color:blue;cursor:pointer;\">${row.custom_proceding_status}</span>`);\r\n\r\n                    // Attach the click event to navigate to the Procedure test document\r\n                    clickable_span.on('click', function() {\r\n                        frappe.set_route('Form', 'Clinical Procedure', row.custom_procedure_id);\r\n                    });\r\n\r\n                    // Replace the text in the grid with the clickable span\r\n                    $(row_element).find(`[data-fieldname=\"custom_proceding_status\"]`).html(clickable_span);\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Observation",
  "enabled": 1,
  "modified": "2024-08-15 16:35:42.429695",
  "module": "HMH CUSTOM APP",
  "name": "Update Obseve  Status",
  "script": "frappe.ui.form.on('Observation', {\n    on_submit: function(frm) {\n        update_custom_radiology_items(frm);\n       }\n    });\n\n\nfunction update_custom_radiology_items(frm) {\n    // Call the server-side method to update patient bill status\n    frappe.call({\n        method: 'hmh_custom_app.custom_api.labtest.radiology.radiology_status',\n        args: {\n            'docname': frm.doc.name\n        },\n        callback: function(response) {\n            console.log(response)\n            if (response.message) {\n                frappe.msgprint(response.message); \n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure",
  "enabled": 1,
  "modified": "2024-08-15 17:50:41.787604",
  "module": "HMH CUSTOM APP",
  "name": "Procedure Status Update",
  "script": "frappe.ui.form.on('Clinical Procedure', {\r\n    refresh: function(frm) {\r\n        // Check if the status is 'Completed' and add a button to update prescriptions\r\n        if (frm.doc.status === 'Completed' && frm.doc.docstatus === 1) {\r\n                frm.add_custom_button(__('Send Results To Doctor'), function() {\r\n                update_procedure_prescription(frm);\r\n            });\r\n        }\r\n    },\r\n     on_submit: function(frm) {\r\n        update_procedure_prescription(frm);\r\n       }\r\n    \r\n});\r\n\r\nfunction update_procedure_prescription(frm) {\r\n    // Call the server-side method to update patient prescription status\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.labtest.procedure.procedure_status',\r\n        args: {\r\n            'docname': frm.doc.name\r\n        },\r\n        callback: function(response) {\r\n            console.log(response);\r\n            if (response.message) {\r\n                frappe.msgprint(response.message); \r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-08-16 16:50:35.964732",
  "module": "HMH CUSTOM APP",
  "name": "Set DOB",
  "script": "frappe.ui.form.on('Patient', {\r\n    custom_patient_mrno: function(frm) {\r\n        if (frm.doc.custom_patient_mrno) {\r\n            // Fetch the Patient Registration Identification record\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Patient Registration Identification',\r\n                    filters: {\r\n                        // Assuming 'mrno' is the field in Patient Registration Identification\r\n                        // that corresponds to custom_patient_mrno\r\n                        'name': frm.doc.custom_patient_mrno\r\n                    }\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        // Set the date_of_birth from the fetched record\r\n                        frm.set_value('dob', r.message.date_of_birth);\r\n                        \r\n                        // Fetch the patient_name\r\n                        frappe.db.get_value('Patient Registration Identification', frm.doc.custom_patient_mrno, 'patient_name')\r\n                        .then(r => {\r\n                            if (r.message && r.message.patient_name) {\r\n                                let patient_name = r.message.patient_name;\r\n                                let name_parts = patient_name.split(' ');\r\n\r\n                                // Splitting the name into first, middle, and last names\r\n                                if (name_parts.length === 2) {\r\n                                    frm.set_value('first_name', name_parts[0]);\r\n                                    frm.set_value('last_name', name_parts[1]);\r\n                                    frm.set_value('middle_name', '');\r\n                                } else if (name_parts.length === 3) {\r\n                                    frm.set_value('first_name', name_parts[0]);\r\n                                    frm.set_value('middle_name', name_parts[1]);\r\n                                    frm.set_value('last_name', name_parts[2]);\r\n                                } else if (name_parts.length > 3) {\r\n                                    frm.set_value('first_name', name_parts[0]);\r\n                                    frm.set_value('last_name', name_parts[name_parts.length - 1]);\r\n                                    frm.set_value('middle_name', name_parts.slice(1, -1).join(' '));\r\n                                } else {\r\n                                    frm.set_value('first_name', patient_name);\r\n                                    frm.set_value('middle_name', '');\r\n                                    frm.set_value('last_name', '');\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                    } else {\r\n                        // If no matching record is found, clear the date_of_birth\r\n                        frm.set_value('dob', null);\r\n                        frappe.msgprint(__('No matching Patient Registration Identification found.'));\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // If custom_patient_mrno is cleared, clear the date_of_birth and name fields\r\n            frm.set_value('dob', null);\r\n            frm.set_value('first_name', null);\r\n            frm.set_value('middle_name', null);\r\n            frm.set_value('last_name', null);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-20 21:12:59.852093",
  "module": "HMH CUSTOM APP",
  "name": "Set rate on child",
  "script": "frappe.ui.form.on('Radiology Items', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n        update_item_amount_radiolo(frm, item, cdt, cdn);\r\n    },   \r\n    amount: function (frm, cdt, cdn) {\r\n        calculateRadiology(frm);\r\n    },\r\n});\r\n\r\nfrappe.ui.form.on('Procedure Prescription', {\r\n    custom_item_code: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n        update_item_amount_procedure(frm, item, cdt, cdn);\r\n    },\r\n     custom_amount: function (frm, cdt, cdn) {\r\n        calculateProcedures(frm);\r\n    },\r\n});\r\n\r\nfrappe.ui.form.on('Lab Prescription', {\r\n    lab_test_code: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n        update_item_amount_labtest(frm, item, cdt, cdn);\r\n    },\r\n     custom_amount: function (frm, cdt, cdn) {\r\n        calculateLabTest(frm);\r\n    }\r\n});\r\n\r\nfunction update_item_amount_labtest(frm, item, cdt, cdn) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.fetch_item_price.fetch_item_rate',\r\n        args: {\r\n            price_list: frm.doc.custom_price_list,\r\n            item_code: item.lab_test_code // Correctly passing the lab_test_code\r\n        },\r\n        callback: function(r) {\r\n            console.log(r);\r\n            if (r.message) {\r\n                var selected_item_amount = r.message;\r\n    \r\n                // Update the amount for the current lab test item\r\n                frappe.model.set_value(cdt, cdn, 'custom_amount', selected_item_amount);\r\n\r\n                // If needed, set other fields like qty or rate\r\n                // frappe.model.set_value(cdt, cdn, 'qty', qty);\r\n                // frappe.model.set_value(cdt, cdn, 'rate', rate);\r\n\r\n            } else {\r\n                frappe.msgprint(__('Error: Unable to fetch item rate.'));\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n            console.error(\"Server call failed:\", r);\r\n        }\r\n    });\r\n}\r\n\r\nfunction update_item_amount_radiolo(frm, item, cdt, cdn) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.fetch_item_price.fetch_item_rate',\r\n        args: {\r\n            price_list: frm.doc.custom_price_list,\r\n            item_code: item.item_code // Correctly passing the lab_test_code\r\n        },\r\n        callback: function(r) {\r\n            console.log(r);\r\n            if (r.message) {\r\n                var selected_item_amount = r.message;\r\n    \r\n                // Update the amount for the current lab test item\r\n                frappe.model.set_value(cdt, cdn, 'amount', selected_item_amount);\r\n\r\n                // If needed, set other fields like qty or rate\r\n                // frappe.model.set_value(cdt, cdn, 'qty', qty);\r\n                // frappe.model.set_value(cdt, cdn, 'rate', rate);\r\n\r\n            } else {\r\n                frappe.msgprint(__('Error: Unable to fetch item rate.'));\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n            console.error(\"Server call failed:\", r);\r\n        }\r\n    });\r\n}\r\n\r\nfunction update_item_amount_procedure(frm, item, cdt, cdn) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.fetch_item_price.fetch_item_rate',\r\n        args: {\r\n            price_list: frm.doc.custom_price_list,\r\n            item_code: item.custom_item_code // Correctly passing the lab_test_code\r\n        },\r\n        callback: function(r) {\r\n            console.log(r);\r\n            if (r.message) {\r\n                var selected_item_amount = r.message;\r\n    \r\n                // Update the amount for the current lab test item\r\n                frappe.model.set_value(cdt, cdn, 'custom_amount', selected_item_amount);\r\n\r\n                // If needed, set other fields like qty or rate\r\n                // frappe.model.set_value(cdt, cdn, 'qty', qty);\r\n                // frappe.model.set_value(cdt, cdn, 'rate', rate);\r\n\r\n            } else {\r\n                frappe.msgprint(__('Error: Unable to fetch item rate.'));\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n            console.error(\"Server call failed:\", r);\r\n        }\r\n    });\r\n}\r\n\r\nfunction calculateProcedures(frm) {\r\n    frm.set_value('custom_total_clinical_procedures', \"\");\r\n    var total_amount = 0;\r\n    frm.doc.procedure_prescription.forEach(function (item) {\r\n        total_amount += item.custom_amount;\r\n       });\r\n    frm.set_value('custom_total_clinical_procedures', total_amount);\r\n    refresh_field('procedure_prescription');\r\n}\r\n\r\nfunction calculateRadiology(frm) {\r\n    frm.set_value('custom_total_amount_for_radiology', \"\");\r\n    var total_amount = 0;\r\n    frm.doc.custom_radiology_items.forEach(function (item) {\r\n        total_amount += item.amount;\r\n       });\r\n    frm.set_value('custom_total_amount_for_radiology', total_amount);\r\n    refresh_field('custom_radiology_items');\r\n}\r\n\r\nfunction calculateLabTest(frm) {\r\n    frm.set_value('custom_total_investigations', \"\");\r\n    var total_amount = 0;\r\n    frm.doc.lab_test_prescription.forEach(function (item) {\r\n        total_amount += item.custom_amount;\r\n       });\r\n    frm.set_value('custom_total_investigations', total_amount);\r\n    refresh_field('lab_test_prescription');\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-10-07 14:24:08.491133",
  "module": "HMH CUSTOM APP",
  "name": "DRUG Description",
  "script": "frappe.ui.form.on('Drug Prescription', {\r\n    period: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n\r\n        // Check if the period field has a value\r\n        if (item.period) {\r\n            if (frm.doc.custom_price_list) {\r\n                console.log(\"Price list found:\", frm.doc.custom_price_list);\r\n                frappe.model.set_value(cdt, cdn, 'price_list', frm.doc.custom_price_list);\r\n\r\n                // Call the function to update the amount based on the item selected\r\n                update_item_amount_drugs(frm, item, cdt, cdn);\r\n            } else {\r\n                console.log(\"No price list found.\");\r\n            }\r\n        } else {\r\n            console.log(\"Period is not selected.\");\r\n   \r\n        }\r\n    },\r\n    dosage: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n\r\n        // Check if the period field has a value\r\n        if (item.period) {\r\n            if (frm.doc.custom_price_list) {\r\n                console.log(\"Price list found:\", frm.doc.custom_price_list);\r\n                frappe.model.set_value(cdt, cdn, 'price_list', frm.doc.custom_price_list);\r\n\r\n                // Call the function to update the amount based on the item selected\r\n                update_item_amount_drugs(frm, item, cdt, cdn);\r\n            } else {\r\n                console.log(\"No price list found.\");\r\n            }\r\n        } else {\r\n            console.log(\"Period is not selected.\");\r\n   \r\n        }\r\n    }\r\n});\r\n\r\nfunction update_item_amount_drugs(frm, item, cdt, cdn) {\r\n    console.log(\"Calling server method to update amount...\");\r\n    console.log(\"Drug code:\", item.drug_code);\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.drug_priscription.on_submit',\r\n        args: {\r\n            patient_encounter: frm.doc.name,\r\n            selected_drug_code: item.drug_code, // Make sure to pass the selected drug code\r\n            dosage: item.dosage,\r\n            period: item.period,\r\n        },\r\n        callback: function(r) {\r\n            console.log(\"Server response:\", r);\r\n            if (r.message) {\r\n                var selected_item_amount = r.message.selected_item_amount;\r\n                var qty = r.message.qty;\r\n                var rate = r.message.rate;\r\n\r\n                // Set the amount for the current drug_prescription item\r\n                frappe.model.set_value(cdt, cdn, 'custom_amount', selected_item_amount);\r\n                frappe.model.set_value(cdt, cdn, 'custom_qty', qty);\r\n                frappe.model.set_value(cdt, cdn, 'custom_rate', rate);\r\n\r\n        } else {\r\n                // frappe.msgprint(__('Error: ') + (r.message ? r.message.message : 'Unknown error'));\r\n            }\r\n        },\r\n        error: function(r) {\r\n            // frappe.msgprint(__('Server call failed.'));\r\n            console.error(\"Server call failed:\", r);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pharmacy",
  "enabled": 1,
  "modified": "2024-08-21 17:50:46.716876",
  "module": "HMH CUSTOM APP",
  "name": "Stock Isue",
  "script": "frappe.ui.form.on('Pharmacy', {\r\n    refresh: function(frm) {\r\n        // Check if the payment_status is \"Fully Paid\" or approval_status is \"Approved To Be Issued\"\r\n        if (frm.doc.payment_status === \"Fully Paid\" || frm.doc.approval_status === \"Approved To Be Issued\") {\r\n            // Add the custom button if the condition is met\r\n            frm.add_custom_button(__('Issue Stock'), function() {\r\n                // Update the approval_status to \"Stock Issued\" without changing the docstatus\r\n                frappe.db.set_value('Pharmacy', frm.doc.name, 'approval_status', 'Stock Issued')\r\n                    .then(() => {\r\n                        // Reload the document to reflect the changes\r\n                        frm.reload_doc();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(\"Error while updating the approval_status:\", error);\r\n                    });\r\n            });\r\n        }\r\n\r\n        // Hide the button if the approval_status is \"Stock Issued\"\r\n        if (frm.doc.approval_status === \"Stock Issued\") {\r\n            frm.remove_custom_button(__('Issue Stock'));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-08-31 02:12:02.394068",
  "module": "HMH CUSTOM APP",
  "name": "Emergency",
  "script": "frappe.ui.form.on('Patient', {\r\n    custom_self_request: function(frm) {\r\n        // Define the dialog\r\n        let d = new frappe.ui.Dialog({\r\n            title: 'Create an Invoice to Receive Payments',\r\n            fields: [\r\n                {\r\n                    fieldname: 'items',\r\n                    label: 'Items',\r\n                    fieldtype: 'Table',\r\n                    fields: [\r\n                        {\r\n                            fieldname: 'item',\r\n                            label: 'Item',\r\n                            fieldtype: 'Link',\r\n                            options: 'Item',\r\n                            reqd: 1,\r\n                            in_list_view: 1,\r\n                            get_query: function() {\r\n                                return {\r\n                                    filters: [\r\n                                        ['item_group', 'in', getItemGroups()]\r\n                                    ]\r\n                                };\r\n                            },\r\n                            change: function() {\r\n                                handleItemChange(this.grid_row, frm.doc.default_price_list);\r\n                            }\r\n                        },\r\n                        {\r\n                            fieldname: 'qty',\r\n                            label: 'Quantity',\r\n                            fieldtype: 'Float',\r\n                            reqd: 1,\r\n                            in_list_view: 1,\r\n                            change: function() {\r\n                                updateAmount(this.grid_row);\r\n                            }\r\n                        },\r\n                        {\r\n                            fieldname: 'rate',\r\n                            label: 'Rate',\r\n                            fieldtype: 'Currency',\r\n                            reqd: 1,\r\n                            in_list_view: 1,\r\n                            change: function() {\r\n                                updateAmount(this.grid_row);\r\n                            }\r\n                        },\r\n                        {\r\n                            fieldname: 'amount',\r\n                            label: 'Amount',\r\n                            fieldtype: 'Currency',\r\n                            reqd: 1,\r\n                            in_list_view: 1\r\n                        }\r\n                    ],\r\n                    in_place_edit: true,\r\n                    data: [],\r\n                    get_data: function() {\r\n                        return [];\r\n                    }\r\n                },\r\n                {\r\n                    fieldname: 'grand_total',\r\n                    label: 'Grand Total',\r\n                    fieldtype: 'Currency',\r\n                    read_only: 1\r\n                }\r\n            ],\r\n            primary_action_label: 'Invoice Now',\r\n            primary_action: function(data) {\r\n                // Separate drug items and non-drug items\r\n                const drugItems = [];\r\n                const nonDrugItems = [];\r\n\r\n                data.items.forEach(item => {\r\n                    if (isDrugItem(item.item)) {\r\n                        drugItems.push(item);\r\n                    } else {\r\n                        nonDrugItems.push(item);\r\n                    }\r\n                });\r\n\r\n                // Create documents based on the items\r\n                if (drugItems.length > 0) {\r\n                    createPharmacyDoc(frm, drugItems);\r\n                }\r\n                if (nonDrugItems.length > 0) {\r\n                    createSalesInvoice(frm, nonDrugItems, d.get_value('grand_total'));\r\n                }\r\n\r\n                d.hide(); // Close the dialog after processing\r\n            }\r\n        });\r\n\r\n        function getItemGroups() {\r\n            return [\r\n                'Drugs',\r\n                'Consumables',\r\n                'Minor Procedure',\r\n                'Major Procedure',\r\n                'Laboratory services-Outsourced',\r\n                'Laboratory services-In-house',\r\n                'Laboratory',\r\n                'X-ray scanning services',\r\n                'Ultrasound Scan Services',\r\n                'Radiology Services',\r\n                'Procedures'\r\n            ];\r\n        }\r\n\r\n        function handleItemChange(grid_row, price_list) {\r\n            let selected_item = grid_row.doc.item;\r\n            if (selected_item) {\r\n                frappe.call({\r\n                    method: 'frappe.client.get_value',\r\n                    args: {\r\n                        doctype: 'Item Price',\r\n                        filters: {\r\n                            item_code: selected_item,\r\n                            price_list: price_list\r\n                        },\r\n                        fieldname: 'price_list_rate'\r\n                    },\r\n                    callback: function(r) {\r\n                        if (r.message && r.message.price_list_rate) {\r\n                            grid_row.doc.rate = r.message.price_list_rate;\r\n                            updateAmount(grid_row);\r\n                        } else {\r\n                            frappe.msgprint(__('Price not found for the selected item.'));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function updateAmount(grid_row) {\r\n            grid_row.doc.amount = grid_row.doc.rate * grid_row.doc.qty;\r\n            grid_row.refresh();\r\n            updateGrandTotal();\r\n        }\r\n\r\n        function updateGrandTotal() {\r\n            let items = d.get_value('items');\r\n            let grand_total = items.reduce((sum, item) => sum + item.amount, 0);\r\n            d.set_value('grand_total', grand_total);\r\n        }\r\n\r\n        function isDrugItem(itemCode) {\r\n            let isDrug = false;\r\n\r\n            // Check if the item belongs to the Drug item group\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Item',\r\n                    filters: { name: itemCode },\r\n                    fieldname: 'item_group'\r\n                },\r\n                async: false, // Keep it synchronous for this check\r\n                callback: function(r) {\r\n                    if (r.message && r.message.item_group === 'Drugs') {\r\n                        isDrug = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return isDrug;\r\n        }\r\n\r\n        function createSalesInvoice(frm, items, grand_total) {\r\n            const patient = frm.doc.name;\r\n            const customer = frm.doc.customer;\r\n            const price_list = frm.doc.default_price_list;\r\n            const cost_center = frm.doc.custom_consulting_department;\r\n            const patient_id = frm.doc.name;\r\n            const company = frappe.defaults.get_global_default(\"company\");\r\n            const posting_date = frappe.datetime.get_today();\r\n            const due_date = frappe.datetime.add_days(posting_date, 15);\r\n\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Sales Invoice',\r\n                    filters: { custom_payment_id: patient_id },\r\n                    fields: ['name']\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.length > 0) {\r\n                        frappe.msgprint(__('An invoice already exists for this patient.'));\r\n                    } else {\r\n                        frappe.call({\r\n                            method: 'frappe.client.insert',\r\n                            args: {\r\n                                doc: {\r\n                                    doctype: 'Sales Invoice',\r\n                                    patient: patient,\r\n                                    customer: customer,\r\n                                    cost_center: cost_center,\r\n                                    selling_price_list: price_list,\r\n                                    company: company,\r\n                                    set_posting_time: 1,\r\n                                    posting_date: posting_date,\r\n                                    custom_payment_id: patient_id,\r\n                                    due_date: due_date,\r\n                                    items: items.map(row => ({\r\n                                        item_code: row.item,\r\n                                        qty: row.qty,\r\n                                        rate: row.rate,\r\n                                        custom_self_request: 1,\r\n                                        amount: row.amount,\r\n                                        cost_center: cost_center\r\n                                    })),\r\n                                    grand_total: grand_total\r\n                                }\r\n                            },\r\n                            callback: function(r) {\r\n                                if (r.message) {\r\n                                    refreshAndSubmitInvoice(r.message.name);\r\n                                    frappe.msgprint(__('Sales Invoice created successfully'));\r\n                                } else {\r\n                                    frappe.msgprint(__('Failed to create Sales Invoice'));\r\n                                }\r\n                            },\r\n                            error: function(err) {\r\n                                frappe.msgprint(__('There was an error while creating the Sales Invoice.'));\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        function createPharmacyDoc(frm, items) {\r\n            const patient = frm.doc.name;\r\n            const price_list = frm.doc.default_price_list;\r\n            const cost_center = frm.doc.custom_consulting_department;\r\n            const patient_id = frm.doc.name;\r\n            const custom_patient_age = frm.doc.custom_patient_age;\r\n            const custom_consulting_doctor = frm.doc.custom_consulting_doctor;\r\n            const company = frappe.defaults.get_global_default(\"company\");\r\n            const posting_date = frappe.datetime.get_today();\r\n\r\n            frappe.call({\r\n                method: 'frappe.client.insert',\r\n                args: {\r\n                    doc: {\r\n                        doctype: 'Pharmacy',\r\n                        patient: patient,\r\n                        patient_age: custom_patient_age,\r\n                        practitioner: custom_consulting_doctor,\r\n                        custom_cost_center: cost_center,\r\n                        price_list: price_list,\r\n                        company: company,\r\n                        encounter_date: posting_date,\r\n                        drug_prescription: items.map(row => ({\r\n                            drug_code: row.item,\r\n                            qty: row.qty,\r\n                            rate: row.rate,\r\n                            self_request: 1,\r\n                            amount: row.amount,\r\n                            dosage_form: \"Cream\",\r\n                            dosage: \"1-0-1\",\r\n                            period: \"1 Day\",\r\n                        }))\r\n                    }\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frappe.msgprint(__('Pharmacy document created successfully'));\r\n                    } else {\r\n                        frappe.msgprint(__('Failed to create Pharmacy document'));\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    frappe.msgprint(__('There was an error while creating the Pharmacy document.'));\r\n                }\r\n            });\r\n        }\r\n\r\n        function refreshAndSubmitInvoice(invoice_name) {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Sales Invoice',\r\n                    name: invoice_name\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frappe.call({\r\n                            method: 'frappe.client.submit',\r\n                            args: {\r\n                                doc: r.message\r\n                            },\r\n                            callback: function(r) {\r\n                                if (r.message) {\r\n                                    frappe.msgprint(__('Sales Invoice {0} has been submitted successfully.', [invoice_name]));\r\n                                } else {\r\n                                    frappe.msgprint(__('Failed to submit Sales Invoice {0}.', [invoice_name]));\r\n                                }\r\n                            },\r\n                            error: function(err) {\r\n                                frappe.msgprint(__('There was an error while submitting the Sales Invoice.'));\r\n                            }\r\n                        });\r\n                    } else {\r\n                        frappe.msgprint(__('Failed to refresh Sales Invoice {0}.', [invoice_name]));\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    frappe.msgprint(__('There was an error while refreshing the Sales Invoice.'));\r\n                }\r\n            });\r\n        }\r\n\r\n        // Show the dialog\r\n        d.show();\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Registration Identification",
  "enabled": 1,
  "modified": "2024-08-21 09:48:07.319968",
  "module": "HMH CUSTOM APP",
  "name": "Populate the Table reg",
  "script": "frappe.ui.form.on('Patient Registration Identification', {\r\n    emergency_id: function(frm) {\r\n        populateTableEmergency(frm);\r\n    }\r\n});\r\n\r\nfunction populateTableEmergency(frm) {\r\n    // Clear the existing rows in the child table first\r\n    const existingRows = frm.doc.patient_identification || [];\r\n    if (existingRows.length > 0) {\r\n        frm.clear_table('patient_identification');\r\n        frm.refresh_field('patient_identification');\r\n    }\r\n\r\n    // Get the filters\r\n    const emergency_id = frm.doc.emergency_id;\r\n\r\n    if (emergency_id) {\r\n        // Call the server-side method\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Emergency',\r\n                filters: {\r\n                    name: emergency_id // Assuming emergency_id is the identifier\r\n                },\r\n                fields: ['nok_name', 'relationship', 'phone','referal'] // Fetch the necessary fields\r\n            },\r\n            callback: function(response) {\r\n                console.log(response)\r\n                const emergency = response.message || [];\r\n                console.log('Fetched emergency data:', emergency);\r\n\r\n                if (emergency.length > 0) {\r\n                    frm.set_value('refered_from', emergency[0].referal);\r\n                    // Add rows to the child table\r\n                    emergency.forEach(item => {\r\n                        let child = frm.add_child('patient_identification');\r\n                        frappe.model.set_value(child.doctype, child.name, 'naxtof_name', item.nok_name);\r\n                        frappe.model.set_value(child.doctype, child.name, 'relationship', item.relationship);\r\n                        frappe.model.set_value(child.doctype, child.name, 'phone_no', item.phone);\r\n                    });\r\n\r\n                    // Refresh the child table\r\n                    frm.refresh_field('patient_identification');\r\n                } else {\r\n                    frappe.msgprint(__('No emergency contact found with the given ID.'));\r\n                }\r\n            },\r\n            error: function(error) {\r\n                frappe.msgprint(__('An error occurred while fetching emergency contact data.'));\r\n                console.error('Error fetching emergency data:', error);\r\n            }\r\n        });\r\n    } else {\r\n        frappe.msgprint(__('Please select an emergency ID.'));\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Emergency",
  "enabled": 1,
  "modified": "2024-08-23 11:32:16.952830",
  "module": "HMH CUSTOM APP",
  "name": "Back to Patient",
  "script": "frappe.ui.form.on('Emergency', {\n    back_to_patient_list: function(frm) {\n        // Add a custom button to navigate back to the Patient List\n        // frm.add_custom_button(__('Back to Patient List'), function() {\n        //     frappe.set_route('List', 'Patient');\n        // });\n         frappe.set_route('List', 'Patient');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Statement",
  "enabled": 1,
  "modified": "2024-09-16 16:27:56.800986",
  "module": "HMH CUSTOM APP",
  "name": "Statement",
  "script": "frappe.ui.form.on('Statement', {\r\n    refresh: function(frm) {\r\n        // Add a button to trigger the population of the statement details\r\n        frm.add_custom_button(__('Get Statement Details'), function() {\r\n            get_statement_details(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction get_statement_details(frm) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.statement.statement.get_sales_invoice_details_and_payments',\r\n        args: {\r\n            customer: frm.doc.customer,\r\n            from_date: frm.doc.from_date,\r\n            to_date: frm.doc.to_date,\r\n            cost_center: frm.doc.cost_center\r\n        },\r\n        callback: function(r) {\r\n            console.log(r);\r\n            if (r.message) {\r\n                let data = r.message.sales_invoice_data;\r\n                let running_balance = 0;  // Variable to keep track of running balance\r\n\r\n                // Clear existing child table data\r\n                frm.clear_table('statement_details');\r\n\r\n                // Populate the child table with the fetched invoice data \r\n                data.forEach(function(invoice) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'item_code', invoice.item_code);\r\n                    frappe.model.set_value(child.doctype, child.name, 'qty', invoice.qty);\r\n                    frappe.model.set_value(child.doctype, child.name, 'quantity', invoice.qty);\r\n                    frappe.model.set_value(child.doctype, child.name, 'rate', invoice.rate);\r\n                    frappe.model.set_value(child.doctype, child.name, 'amount', invoice.amount);\r\n                    frappe.model.set_value(child.doctype, child.name, 'invoice_date', invoice.posting_date); // Set invoice date\r\n                    frappe.model.set_value(child.doctype, child.name, 'invoice_vourcher', invoice.invoice_name); \r\n           \r\n                    // Update the running balance\r\n                    running_balance += invoice.amount;  // Add invoice amount to running balance\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', running_balance); // Set running balance\r\n                });\r\n\r\n                // Populate payment details in the child table\r\n                r.message.payments.forEach(function(payment) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'payment_entry', payment.payment_entry_name);\r\n                    frappe.model.set_value(child.doctype, child.name, 'station_pe', payment.cost_center);\r\n                    frappe.model.set_value(child.doctype, child.name, 'invoice_date', payment.posting_date); // Set payment date\r\n                    frappe.model.set_value(child.doctype, child.name, 'paid_amount', payment.paid_amount); // Set paid amount\r\n                    \r\n                    // Update the running balance with paid amount\r\n                    running_balance -= payment.paid_amount; // Subtract paid amount from running balance\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', running_balance); // Set updated running balance\r\n                });\r\n\r\n                // Populate GL Entry details in the child table\r\n                r.message.gl_entries.forEach(function(gl_entry) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'journal_date', gl_entry.posting_date); // Set journal date\r\n                    frappe.model.set_value(child.doctype, child.name, 'station_jl', gl_entry.cost_center); // Set cost center\r\n                    frappe.model.set_value(child.doctype, child.name, 'voucher_no', gl_entry.voucher_no); // Set voucher number\r\n                    frappe.model.set_value(child.doctype, child.name, 'amount', gl_entry.debit); // Set debit as amount\r\n                    frappe.model.set_value(child.doctype, child.name, 'paid_amount', gl_entry.credit); // Set credit as paid amount\r\n                    \r\n                    // Update the running balance with GL Entry amounts\r\n                    running_balance += gl_entry.debit;  // Add debit to running balance\r\n                    running_balance -= gl_entry.credit;  // Subtract credit from running balance\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', running_balance); // Set updated running balance\r\n                });\r\n\r\n                // Refresh the field to display the updated child table\r\n                frm.refresh_field('statement_details');\r\n\r\n                // Recalculate totals after populating the child table\r\n                calculateTotals(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction calculateTotals(frm) {\r\n    var total_amount = 0;\r\n    var total_paid = 0;\r\n    frm.doc.statement_details.forEach(function(item) {\r\n        total_amount += item.amount || 0;  // Add amount, default to 0 if undefined\r\n        total_paid += item.paid_amount || 0;  // Add paid amount, default to 0 if undefined\r\n    });\r\n    var outstanding_amount = total_amount - total_paid;\r\n    frm.set_value('total_invoices', total_amount);  // Set total invoices\r\n    frm.set_value('total_paid', total_paid);  // Set total paid\r\n    frm.set_value('total_outstanding_amount', outstanding_amount);  // Set total outstanding amount\r\n\r\n    // Refresh the parent fields\r\n    frm.refresh_field('total_invoices');\r\n    frm.refresh_field('total_paid');\r\n    frm.refresh_field('total_outstanding_amount');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Vital Signs",
  "enabled": 1,
  "modified": "2024-08-28 08:02:15.052163",
  "module": "HMH CUSTOM APP",
  "name": "Vitals In meter",
  "script": "frappe.ui.form.on('Vital Signs', {\r\n    custom_height_in_centimeters_: function(frm) {\r\n        // Get the value of height in centimeters\r\n        let height_in_cm = frm.doc.custom_height_in_centimeters_;\r\n\r\n        if (height_in_cm) {\r\n            // Convert height from centimeters to meters\r\n            let height_in_m = height_in_cm / 100;\r\n\r\n            // Set the height in meters in the 'height_in_meters_' field\r\n            frappe.model.set_value(frm.doctype, frm.docname, 'height', height_in_m);\r\n        } else {\r\n            // If the height in centimeters is empty, clear the height in meters\r\n            frappe.model.set_value(frm.doctype, frm.docname, 'height', null);\r\n        }\r\n    },\r\n    onload: function(frm) {\r\n        // Make the height_in_meters_ field read-only\r\n        frm.set_df_property('height', 'read_only', 1);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 0,
  "modified": "2024-08-29 15:45:17.606789",
  "module": "HMH CUSTOM APP",
  "name": "Print Pdf",
  "script": "frappe.ui.form.on(\"Patient Encounter\", {\r\n    refresh: function(frm) {\r\n        // Check if the document is submitted\r\n        if (frm.doc.docstatus == 0 || frm.doc.docstatus == 1) {\r\n            frm.add_custom_button(\r\n                __(\"Print PDF\"),\r\n                function() {\r\n                    // Define the print format name\r\n                    var print_format = \"Patient Medical Report\";\r\n\r\n                    // Generate the URL to download the PDF file using the base URL\r\n                    var base_url = \"/printview\";\r\n                    var url = \r\n                        `${base_url}?doctype=${encodeURIComponent(frm.doc.doctype)}` +\r\n                        `&name=${encodeURIComponent(frm.doc.name)}` +\r\n                        `&format=${encodeURIComponent(print_format)}` +\r\n                        `&no_letterhead=1` + // Set to 1 to disable letterhead; change to 0 to include it\r\n                        `&letterhead=No%20Letterhead` +\r\n                        `&settings={}` +\r\n                        `&_lang=en`;\r\n\r\n                    // Log the URL for debugging\r\n                    console.log(url);\r\n\r\n                    // Open the PDF file in a new tab\r\n                    window.open(url, '_blank');\r\n                },\r\n                __(\"PDF\")\r\n            );\r\n        }\r\n    }\r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pharmacy",
  "enabled": 1,
  "modified": "2024-08-30 17:56:49.607481",
  "module": "HMH CUSTOM APP",
  "name": "Pharm Stock Isue",
  "script": "frappe.ui.form.on('Pharmacy', {\r\n    refresh: function(frm) {\r\n        // Check if the document is in docstatus 1 (submitted)\r\n        if (frm.doc.docstatus === 1) {\r\n            // Make the re_isue_drugs field visible and editable\r\n            frm.set_df_property('re_isue_drugs', 'read_only', 0);\r\n            frm.set_df_property('re_isue_drugs', 'hidden', 0);\r\n        } else {\r\n            // Hide or make the re_isue_drugs field read-only if not in docstatus 1\r\n            frm.set_df_property('re_isue_drugs', 'read_only', 1);\r\n            frm.set_df_property('re_isue_drugs', 'hidden', 1);\r\n        }\r\n    },\r\n    re_isue_drugs: function(frm) {\r\n        // Add custom button to set the invoiced field\r\n        frm.add_custom_button(__('Re-Issue Stock'), function() {\r\n            frappe.call({\r\n                method: 'hmh_custom_app.custom_api.stock.stock_isue.create_stock_entry',\r\n                args: {\r\n                    docname: frm.doc.name,\r\n                    warehouse: frm.doc.store,\r\n                    posting_date: frm.doc.encounter_date,\r\n                    posting_time: frm.doc.encounter_time,\r\n                    patient: frm.doc.patient,\r\n                    cost_center: frm.doc.medical_department,\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message.status === 'created') {\r\n                        frappe.msgprint(__(response.message.message));\r\n                        // Update the approval_status to \"Stock Issued\" without changing the docstatus\r\n                        frappe.db.set_value('Pharmacy', frm.doc.name, 'approval_status', 'Stock Issued')\r\n                            .then(() => {\r\n                                // Reload the document to reflect the changes\r\n                                frm.reload_doc();\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(\"Error while updating the approval_status:\", error);\r\n                            });\r\n                    } else if (response.message.status === 'exists') {\r\n                        frappe.msgprint(__(response.message.message));\r\n                        frm.reload_doc();\r\n                    } else {\r\n                        frappe.msgprint(__(response.message.message));\r\n                        frm.reload_doc();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-09-25 19:16:33.494327",
  "module": "HMH CUSTOM APP",
  "name": "Request for Pay Later",
  "script": "frappe.ui.form.on('Patient', {\r\n    refresh: function(frm) {\r\n        // Check if the document is in docstatus 0 (draft)\r\n        if (frm.doc.docstatus === 0) {\r\n            frm.add_custom_button(__('Request 4 Later Payments'), function() {\r\n                // Create a dialog to prompt the user to fill in the custom_reason field\r\n                let dialog = new frappe.ui.Dialog({\r\n                    title: __('Enter Reason'),\r\n                    fields: [\r\n                        {\r\n                            label: __('Reason'),\r\n                            fieldname: 'custom_reason',\r\n                            fieldtype: 'Small Text',\r\n                            reqd: true,\r\n                            default: frm.doc.custom_reason || ''  // Pre-fill if already set\r\n                        }\r\n                    ],\r\n                    primary_action_label: __('Submit'),\r\n                    primary_action(values) {\r\n                        // Set the custom_reason field with the entered value\r\n                        frm.set_value('custom_reason', values.custom_reason);\r\n                        frm.refresh_field('custom_reason');\r\n                        dialog.hide(); // Close the dialog\r\n\r\n                        // Proceed with the API call for Notification Requests\r\n                        const patient = frm.doc.name;\r\n                        const customer = frm.doc.customer;\r\n                        const time = frm.doc.custom_time;\r\n                        const posting_date = frappe.datetime.get_today();\r\n\r\n                        frappe.call({\r\n                            method: 'hmh_custom_app.custom_api.later_payments.request_later_pay.create_notification_request',\r\n                            args: {\r\n                                patient: patient,\r\n                                customer: customer,\r\n                                time: time,\r\n                                reason: values.custom_reason\r\n                            },\r\n                            callback: function(r) {\r\n                                if (r.message) {\r\n                                    frappe.msgprint(__('Your Request has been Sent successfully.'));\r\n\r\n                                    // Create a notification log tied to the draft of Notification Requests\r\n                                    create_notification_log(`Draft Notification Requests for ${patient}`, 'Notification Requests', r.message);\r\n                                } else {\r\n                                    frappe.msgprint(__('Failed to create Notification Requests document.'));\r\n                                }\r\n                            },\r\n                            error: function(err) {\r\n                                frappe.msgprint(__('There was an error while creating the Notification Requests document.'));\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                dialog.show(); // Show the dialog\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// Function to create a notification log\r\nfunction create_notification_log(subject, document_type, document_name) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.later_payments.request_later_pay.create_notification_log',\r\n        args: {\r\n            subject: subject,\r\n            document_type: document_type,\r\n            document_name: document_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                // Optional: Show a message if needed\r\n                // frappe.msgprint(__('Draft notification created successfully.'));\r\n            } else {\r\n                // frappe.msgprint(__('Failed to create draft notification.'));\r\n            }\r\n        },\r\n        error: function(err) {\r\n            frappe.msgprint(__('There was an error while creating the draft notification.'));\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Notification Requests",
  "enabled": 1,
  "modified": "2024-09-25 20:58:59.929250",
  "module": "HMH CUSTOM APP",
  "name": "Notify",
  "script": "frappe.ui.form.on('Notification Requests', {\r\n    before_submit: function(frm) {\r\n        // Ensure the document is valid before submission\r\n        if (!frm.doc.name || !frm.doc.patient) {\r\n            frappe.msgprint(__('Document name or patient is missing.'));\r\n            return;\r\n        }\r\n\r\n        // Call the server-side function to handle deletion and updates\r\n        frappe.call({\r\n            method: 'hmh_custom_app.custom_api.later_payments.request_later_pay.before_submit', // Update with the actual path to your module\r\n            args: {\r\n                docname: frm.doc.name // Pass the document name to the server-side function\r\n            },\r\n            callback: function(response) {\r\n                if (response.message) {\r\n                    // Notify user of the operation result\r\n                    frappe.msgprint(response.message);\r\n                }\r\n            },\r\n            error: function(err) {\r\n                // Handle any errors from the server-side function\r\n                frappe.msgprint(__('Error while processing the submission: {0}', err.message));\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-08-31 12:14:31.459722",
  "module": "HMH CUSTOM APP",
  "name": "Delay Bill Late 24hrs",
  "script": "frappe.ui.form.on('Customer', {\r\n    after_save: function(frm) {\r\n        if (frm.doc.custom_bill_status == \"Bill Later\") {\r\n            // Schedule the status reset after 24 hours\r\n            setTimeout(function() {\r\n                // Update the custom_bill_status field to 'Not Set'\r\n                frm.set_value('custom_bill_status', 'Not Set');\r\n                frm.save_or_update();\r\n                frappe.msgprint(\"The custom_bill_status has been reset after 24 hours.\");\r\n            }, 86400000);  // 86400000 milliseconds = 24 hours\r\n        }\r\n    }\r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-09-14 13:30:35.000412",
  "module": "HMH CUSTOM APP",
  "name": "Emergence Patient",
  "script": "frappe.ui.form.on('Patient', {\r\n    custom_emergence: function(frm) {\r\n        show_emergency_dialog(frm);\r\n    }\r\n});\r\n\r\nfunction show_emergency_dialog(frm) {\r\n    let d = new frappe.ui.Dialog({\r\n        title: 'Enter Emergency Details',\r\n        fields: [\r\n            {\r\n                label: 'NOK Name',\r\n                fieldname: 'nok_name',\r\n                fieldtype: 'Data',\r\n                reqd: 1\r\n            },\r\n            {\r\n                label: 'Country Code',\r\n                fieldname: 'country_code',\r\n                fieldtype: 'Select',\r\n                options: [\r\n                    '+1 (USA/Canada)', '+44 (UK)', '+61 (Australia)', '+91 (India)', '+256',\r\n                    '+254 (Kenya)', '+27 (South Africa)', '+49 (Germany)', '+81 (Japan)', '+86 (China)'\r\n                ],\r\n                'default': '+256-',\r\n                reqd: 1,\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: 'NOK Phone',\r\n                fieldname: 'phone',\r\n                fieldtype: 'Data',\r\n                'default': '7',  // Fixed '7' at the beginning\r\n                reqd: 1\r\n            },\r\n            {\r\n                label: 'Relationship',\r\n                fieldname: 'relationship',\r\n                fieldtype: 'Data',\r\n                reqd:1\r\n            },\r\n            {\r\n                label: 'Referred From',\r\n                fieldname: 'referal',\r\n                fieldtype: 'Data'\r\n            }\r\n        ],\r\n        primary_action_label: 'Submit',\r\n        primary_action: function(data) {\r\n            // Validate and correct the phone number\r\n            let phone_number = data.phone;\r\n\r\n            // Remove any leading zero if present, except for the fixed '7'\r\n            if (phone_number.startsWith('07')) {\r\n                phone_number = phone_number.replace(/^07/, '7');\r\n            }\r\n\r\n            if (validate_phone_number(phone_number)) {\r\n                // Concatenate country code with the phone number\r\n                let full_phone = data.country_code.replace(/\\s/g, '') + phone_number;\r\n\r\n                // Create Emergency doc with the concatenated phone number\r\n                create_emergency_doc(frm, {\r\n                    nok_name: data.nok_name,\r\n                    phone: full_phone,\r\n                    relationship: data.relationship,\r\n                    referal: data.referal\r\n                });\r\n                d.hide();\r\n            } else {\r\n                frappe.msgprint(__('Please enter a valid phone number.'));\r\n            }\r\n        }\r\n    });\r\n\r\n    d.show();\r\n}\r\n\r\n// Validate that the phone number contains only digits and has a valid length\r\nfunction validate_phone_number(phone) {\r\n    const phone_regex = /^[0-9]{9,12}$/;  // Accepts phone numbers with 9 to 12 digits\r\n    return phone_regex.test(phone);\r\n}\r\n\r\nfunction create_emergency_doc(frm, data) {\r\n    frappe.call({\r\n        method: 'frappe.client.insert',\r\n        args: {\r\n            doc: {\r\n                doctype: 'Emergency',\r\n                nok_name: data.nok_name,\r\n                phone: data.phone,\r\n                relationship: data.relationship,\r\n                referal: data.referal\r\n            }\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                frappe.msgprint('Emergency record created successfully with phone: ' + data.phone);\r\n            } else {\r\n                frappe.msgprint('Error creating Emergency record.');\r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-09-25 16:36:19.363051",
  "module": "HMH CUSTOM APP",
  "name": "Lab Results",
  "script": "// Helper function to extract the template part from the test key\r\nfunction extractTemplateFromTestKey(test_key) {\r\n    // Split the key by '-' to separate the components\r\n    let parts = test_key.split('-');\r\n\r\n    // Check if the number of parts is sufficient (should be at least 4 to get a valid template)\r\n    if (parts.length >= 4) {\r\n        // Get the template by joining parts from the 3rd index onward (to include all template parts)\r\n        return parts.slice(3).join('-').trim(); // This combines the remaining parts into the template\r\n    } else {\r\n        return ''; // Return empty if the structure is not as expected\r\n    }\r\n}\r\n\r\n// Main function to fetch lab tests and process them\r\nfrappe.ui.form.on('Patient Encounter', {\r\n    custom_get_results: function(frm) {\r\n        if (!frm.doc.patient) {\r\n            frappe.msgprint(__('Please select a patient first.'));\r\n            return;\r\n        }\r\n        fetch_lab_tests(frm);\r\n    }\r\n});\r\n\r\n// Function to fetch and process lab tests\r\nfunction fetch_lab_tests(frm) {\r\n    frappe.call({\r\n        method: \"hmh_custom_app.custom_api.reports.latest_test.fetch_patient_labtest\",  // Backend method to fetch lab tests\r\n        args: {\r\n            patient: frm.doc.patient  // Ensure the 'patient' field is present in the form\r\n        },\r\n        callback: function(response) {\r\n            console.log(response);\r\n            if (response.message) {\r\n                let data = response.message;\r\n\r\n                // Process kin details\r\n                if (data.kin_details) {\r\n                    frm.set_value('custom_nok_name', data.kin_details.naxtof_name || '');\r\n                    frm.set_value('custom_nok_relationship', data.kin_details.relationship || '');\r\n                    frm.set_value('custom_nok_phone_no', data.kin_details.phone_no || '');\r\n                }\r\n\r\n                // Process patient details\r\n                if (data.patient_details) {\r\n                    frm.set_value('custom_address', data.patient_details.village || '');\r\n                }\r\n\r\n                // Clear existing child table (report_details)\r\n                frm.clear_table('custom_report_details');\r\n\r\n                // Loop through the grouped lab test results by date\r\n                Object.keys(data.lab_tests_grouped).forEach(function(date) {\r\n                    let date_group = data.lab_tests_grouped[date];\r\n\r\n                    // Iterate over the test keys within each date group\r\n                    Object.keys(date_group).forEach(function(test_key) {\r\n                        let test_data = date_group[test_key];\r\n\r\n                        // Extract the template from the test key\r\n                        let template = extractTemplateFromTestKey(test_key); // Extract the template correctly\r\n\r\n                        // Process normal tests\r\n                        if (Array.isArray(test_data.normal_tests)) {\r\n                            test_data.normal_tests.forEach(function(test) {\r\n                                add_child_row(frm, {\r\n                                    test_name: test.lab_test_name,\r\n                                    result_value: test.result_value,\r\n                                    lab_technician_name: test.employee_name,\r\n                                    doctor_name: test.practitioner_name,\r\n                                    date: date,\r\n                                    template: template // Set template from test key\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        // Process descriptive tests\r\n                        if (Array.isArray(test_data.descriptive_tests)) {\r\n                            test_data.descriptive_tests.forEach(function(test) {\r\n                                add_child_row(frm, {\r\n                                    test_name: test.lab_test_particulars,\r\n                                    result_value: test.result_value,\r\n                                    lab_technician_name: test.employee_name,\r\n                                    doctor_name: test.practitioner_name,\r\n                                    date: date,\r\n                                    template: template // Set template from test key\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        // Process organism tests\r\n                        if (Array.isArray(test_data.organism_tests)) {\r\n                            test_data.organism_tests.forEach(function(test) {\r\n                                add_child_row(frm, {\r\n                                    test_name: test.organism,\r\n                                    result_value: test.colony_population,\r\n                                    lab_technician_name: test.employee_name,\r\n                                    doctor_name: test.practitioner_name,\r\n                                    date: date,\r\n                                    template: template // Set template from test key\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                // Refresh the child table after adding rows\r\n                frm.refresh_field('custom_report_details');\r\n            } else {\r\n                frappe.msgprint(__('No lab tests found for the selected patient.'));\r\n            }\r\n        },\r\n        error: function(err) {\r\n            frappe.msgprint(__('An error occurred while fetching lab tests.'));\r\n            console.error(err);\r\n        }\r\n    });\r\n}\r\n\r\n// Helper function to add rows to the child table\r\nfunction add_child_row(frm, row_data) {\r\n    let child_row = frm.add_child('custom_report_details');\r\n    Object.keys(row_data).forEach(function(key) {\r\n        child_row[key] = row_data[key];\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Registration Identification",
  "enabled": 1,
  "modified": "2024-10-02 14:52:27.702960",
  "module": "HMH CUSTOM APP",
  "name": "Set the reg no patient",
  "script": "frappe.ui.form.on('Patient Registration Identification', {\r\n    refresh: function(frm) {\r\n        // Add a custom button\r\n        frm.add_custom_button(__('Go to Patient'), function() {\r\n            // Get the current doc.name (which is the unique identifier of the current document)\r\n            let patient_registration_id = frm.doc.name;\r\n            \r\n            frappe.model.with_doctype('Patient', function() {\r\n                    var patient_doc = frappe.model.get_new_doc('Patient');\r\n                    patient_doc.custom_patient_mrno = patient_registration_id;\r\n\r\n                    frappe.set_route('Form', 'Patient', patient_doc.name);\r\n                });\r\n\r\n   \r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-10-02 15:47:49.134248",
  "module": "HMH CUSTOM APP",
  "name": "Recieve Pays",
  "script": "frappe.ui.form.on('Patient', {\n    refresh: function(frm) {\n        // Add a custom button\n        frm.add_custom_button(__('Recieve Payment'), function() {\n            // Get the current doc.name (which is the unique identifier of the current document)\n            let patient_registration_id = frm.doc.name;\n            \n                frappe.model.with_doctype('Patient Payment Management', function() {\n                    var patient_doc = frappe.model.get_new_doc('Patient Payment Management');\n                    patient_doc.patient = frm.doc.name;\n\n                    frappe.set_route('Form', 'Patient Payment Management', patient_doc.name);\n                });\n\n   \n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Payment Management",
  "enabled": 1,
  "modified": "2024-10-02 15:56:40.987066",
  "module": "HMH CUSTOM APP",
  "name": "Take Vitals",
  "script": "frappe.ui.form.on('Patient Payment Management', {\r\n    refresh: function(frm) {\r\n        // Add a custom button\r\n        frm.add_custom_button(__('Go to Vitals'), function() {\r\n            // Get the current doc.name (which is the unique identifier of the current document)\r\n            let patient_id = frm.doc.patient;\r\n\r\n            // Prompt the user for the Patient name or MRN (can be used to create or search existing)\r\n            frappe.prompt([\r\n                {\r\n                    label: 'Patient Name',\r\n                    fieldname: 'patient_name_or_mrn',\r\n                    fieldtype: 'Data',\r\n                    reqd: 1,\r\n                    default: patient_id,\r\n                    description: 'Enter the Patient Name or MRN to search or create new'\r\n                }\r\n            ],\r\n            function(data) {\r\n                // Check if a patient with the given MRN or name exists\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: {\r\n                        doctype: 'Vital Signs',\r\n                        filters: {\r\n                            'patient': data.patient_name_or_mrn\r\n                        },\r\n                        fields: ['name']\r\n                    },\r\n                    callback: function(response) {\r\n                        if (response.message && response.message.length > 0) {\r\n                            // Patient exists, route to the existing Patient document\r\n                            let patient_name = response.message[0].name;\r\n                            frappe.set_route('Form', 'Vital Signs', patient_name).then(() => {\r\n                                // frappe.msgprint(__('Navigated to existing Patient: ' + patient_name));\r\n                            });\r\n                        } else {\r\n                            // Patient does not exist, create a new Patient document\r\n                            frappe.call({\r\n                                method: 'frappe.client.insert',\r\n                                args: {\r\n                                    doc: {\r\n                                        doctype: 'Patient',\r\n                                        patient_name: data.patient_name_or_mrn,\r\n                                        custom_patient_mrno: patient_registration_id\r\n                                    }\r\n                                },\r\n                                callback: function(response) {\r\n                                    if (response.message) {\r\n                                        // After creation, route to the new Patient document\r\n                                        frappe.set_route('Form', 'Patient', response.message.name).then(() => {\r\n                                            // frappe.msgprint(__('New Patient created: ' + response.message.name));\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            __('Enter MRN or Patient Name'),\r\n            __('Proceed'));\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-10-14 17:31:25.440430",
  "module": "HMH CUSTOM APP",
  "name": "Inpatient encounter",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    refresh: function(frm) { \r\n        // Add a custom button\r\n        frm.add_custom_button(__('Process Admission'), function() {\r\n            schedule_admission(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction schedule_admission(frm) {\r\n    // Call the backend method to create an inpatient admission\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.inpatient.shecdule_admission.create_inpatient_admission_on_save',\r\n        args: {\r\n            patient: frm.doc.patient,  // Pass patient ID\r\n            encounter_date: frm.doc.encounter_date,  // Pass encounter date\r\n            practitioner: frm.doc.practitioner_name  // Pass practitioner name\r\n        },\r\n        callback: function(r) {\r\n            console.log(r);\r\n            if (r && r.message) {\r\n                // Check if message indicates an existing admission\r\n                const message = r.message.message; // Access the message inside the response\r\n                if (message.includes(\"already exists\")) {\r\n                    frappe.msgprint(__('Error: ' + message)); // Admission already exists\r\n                } else {\r\n                    frappe.msgprint(__('Inpatient Admission scheduled successfully.')); // Successful creation\r\n                }\r\n            } else {\r\n                frappe.msgprint(__('Error: Unable to schedule.'));\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n            console.error(\"Server call failed:\", r);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inpatient Admission",
  "enabled": 1,
  "modified": "2024-10-14 18:51:29.855785",
  "module": "HMH CUSTOM APP",
  "name": "Inpatient Admission Treatment",
  "script": "frappe.ui.form.on('Inpatient Admission', {\r\n    refresh: function(frm) {\r\n        // Add a custom button\r\n        frm.add_custom_button(__('Give Treatment'), function() {\r\n            // Get the current doc.name (which is the unique identifier of the current document)\r\n            let patient_id = frm.doc.patient_id;\r\n\r\n            // Prompt the user for the Patient name or MRN (can be used to create or search existing)\r\n            frappe.prompt([\r\n                {\r\n                    label: 'Patient Name',\r\n                    fieldname: 'patient_id',\r\n                    fieldtype: 'Data',\r\n                    reqd: 1,\r\n                    default: patient_id,\r\n                    description: 'Enter the Patient Name or MRN to search or create new'\r\n                }\r\n            ],\r\n            function(data) {\r\n                // Check if a patient with the given MRN or name exists\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: {\r\n                        doctype: 'Nurse Treatment Record',\r\n                        filters: {\r\n                            'patient': data.patient_id\r\n                        },\r\n                        fields: ['name']\r\n                    },\r\n                    callback: function(response) {\r\n                        if (response.message && response.message.length > 0) {\r\n                            // Patient exists, route to the existing Patient document\r\n                            let patient_name = response.message[0].name;\r\n                            frappe.set_route('Form', 'Nurse Treatment Record', patient_name).then(() => {\r\n                                // frappe.msgprint(__('Navigated to existing Patient: ' + patient_name));\r\n                            });\r\n                        } else {\r\n                            // Patient does not exist, create a new Patient document\r\n                  \r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            __('Enter MRN or Patient Name'),\r\n            __('Proceed'));\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Registration Identification",
  "enabled": 1,
  "modified": "2024-10-15 14:33:10.767807",
  "module": "HMH CUSTOM APP",
  "name": "calcualte the date of birth",
  "script": "frappe.ui.form.on('Patient Registration Identification', {\r\n    full_age: function(frm) {\r\n        // Get the age value from the field\r\n        let age = frm.doc.full_age;\r\n\r\n        // Check if the age is a valid number\r\n        if (age && !isNaN(age)) {\r\n            // Get the current date\r\n            let today = new Date();\r\n\r\n            // Calculate the birth year by subtracting the age from the current year\r\n            let birth_year = today.getFullYear() - age;\r\n\r\n            // Create a new date object for the approximate birth date\r\n            let birth_date = new Date(birth_year, today.getMonth(), today.getDate());\r\n\r\n            // Set the calculated birth date in the 'date_of_birth' field\r\n            frm.set_value('date_of_birth', birth_date);\r\n        } else {\r\n            // Clear the date_of_birth field if the age is invalid\r\n            frm.set_value('date_of_birth', null);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]